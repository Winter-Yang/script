initWithAccountType:
initWithOAuthToken:tokenSecret:
initWithOAuth2Token:refreshToken:expiryDate:
accountWithIdentifier:
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
saveAccount:withCompletionHandler:
requestAccessToAccountsWithType:withCompletionHandler:
requestAccessToAccountsWithType:options:completion:
renewCredentialsForAccount:completion:
removeAccount:withCompletionHandler:
newPersonViewController:didCompleteWithNewPerson:
peoplePickerNavigationController:didSelectPerson:
peoplePickerNavigationController:didSelectPerson:property:identifier:
peoplePickerNavigationControllerDidCancel:
peoplePickerNavigationController:shouldContinueAfterSelectingPerson:
peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier:
setHighlightedItemForProperty:withIdentifier:
personViewController:shouldPerformDefaultActionForPerson:property:identifier:
unknownPersonViewController:didResolveToPerson:
unknownPersonViewController:shouldPerformDefaultActionForPerson:property:identifier:
valueForProperty:
defaultRepresentation
representationForUTI:
thumbnail
aspectRatioThumbnail
writeModifiedImageDataToSavedPhotosAlbum:metadata:completionBlock:
writeModifiedVideoAtPathToSavedPhotosAlbum:completionBlock:
setImageData:metadata:completionBlock:
setVideoAtPath:completionBlock:
UTI
dimensions
size
getBytes:fromOffset:length:error:
fullResolutionImage
CGImageWithOptions:
fullScreenImage
url
metadata
orientation
scale
filename
posterImage
setAssetsFilter:
numberOfAssets
enumerateAssetsUsingBlock:
enumerateAssetsWithOptions:usingBlock:
enumerateAssetsAtIndexes:options:usingBlock:
addAsset:
enumerateGroupsWithTypes:usingBlock:failureBlock:
assetForURL:resultBlock:failureBlock:
groupForURL:resultBlock:failureBlock:
addAssetsGroupAlbumWithName:resultBlock:failureBlock:
writeImageToSavedPhotosAlbum:orientation:completionBlock:
writeImageToSavedPhotosAlbum:metadata:completionBlock:
writeImageDataToSavedPhotosAlbum:metadata:completionBlock:
writeVideoAtPathToSavedPhotosAlbum:completionBlock:
videoAtPathIsCompatibleWithSavedPhotosAlbum:
init
initWithComponentDescription:options:error:
initWithComponentDescription:error:
allocateRenderResourcesAndReturnError:
deallocateRenderResources
reset
tokenByAddingRenderObserver:
removeRenderObserver:
setDeviceID:error:
startHardwareAndReturnError:
stopHardware
initWithAudioUnit:busType:busses:
initWithAudioUnit:busType:
objectAtIndexedSubscript:
setBusCount:error:
addObserverToAllBusses:forKeyPath:options:context:
removeObserverFromAllBusses:forKeyPath:context:
setFormat:error:
shouldChangeToFormat:forBus:
setRenderResourcesAllocated:
initWithFormat:error:
replaceBusses:
createAudioUnitWithComponentDescription:error:
displayNameWithLength:
tokenByAddingParameterObserver:
tokenByAddingParameterRecordingObserver:
removeParameterObserver:
parameterWithAddress:
parameterWithID:scope:element:
setValue:originator:
setValue:originator:atHostTime:
stringFromValue:
valueFromString:
cancelLoading
trackWithTrackID:
mediaSelectionGroupForMediaCharacteristic:
initWithURL:options:
compatibleTrackForCompositionTrack:
addFragmentedAsset:
removeFragmentedAsset:
URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:
URLSession:assetDownloadTask:didResolveMediaSelection:
assetDownloadTaskWithURLAsset:destinationURL:options:
dataTaskWithRequest:
dataTaskWithURL:
uploadTaskWithRequest:fromFile:
uploadTaskWithRequest:fromData:
uploadTaskWithStreamedRequest:
downloadTaskWithRequest:
downloadTaskWithURL:
downloadTaskWithResumeData:
dataTaskWithRequest:completionHandler:
dataTaskWithURL:completionHandler:
uploadTaskWithRequest:fromFile:completionHandler:
uploadTaskWithRequest:fromData:completionHandler:
downloadTaskWithRequest:completionHandler:
downloadTaskWithURL:completionHandler:
downloadTaskWithResumeData:completionHandler:
initWithAsset:presetName:
exportAsynchronouslyWithCompletionHandler:
cancelExport
determineCompatibleFileTypesWithCompletionHandler:
initWithAsset:
copyCGImageAtTime:actualTime:error:
generateCGImagesAsynchronouslyForTimes:completionHandler:
cancelAllCGImageGeneration
initWithAsset:error:
canAddOutput:
addOutput:
startReading
cancelReading
copyNextSampleBuffer CF_RETURNS_RETAINED
resetForReadingTimeRanges:
markConfigurationAsFinal
initWithTrack:outputSettings:
initWithAudioTracks:audioSettings:
initWithVideoTracks:videoSettings:
initWithAssetReaderTrackOutput:
nextTimedMetadataGroup
initWithTrack:
setDelegate:queue:
resourceLoader:shouldWaitForLoadingOfRequestedResource:
resourceLoader:shouldWaitForRenewalOfRequestedResource:
resourceLoader:didCancelLoadingRequest:
resourceLoader:shouldWaitForResponseToAuthenticationChallenge:
resourceLoader:didCancelAuthenticationChallenge:
finishLoading
finishLoadingWithError:
respondWithData:
streamingContentKeyRequestDataForApp:contentIdentifier:options:error:
persistentContentKeyFromKeyVendorResponse:options:error:
finishLoadingWithResponse:data:redirect:
hasMediaCharacteristic:
segmentForTrackTime:
samplePresentationTimeForTrackTime:
makeSampleCursorWithPresentationTimeStamp:
makeSampleCursorAtFirstSampleInDecodeOrder
makeSampleCursorAtLastSampleInDecodeOrder
initWithURL:fileType:error:
canApplyOutputSettings:forMediaType:
canAddInput:
addInput:
startWriting
startSessionAtSourceTime:
endSessionAtSourceTime:
cancelWriting
finishWriting
finishWritingWithCompletionHandler:
canAddInputGroup:
addInputGroup:
initWithInputs:defaultInput:
initWithMediaType:outputSettings:
initWithMediaType:outputSettings:sourceFormatHint:
requestMediaDataWhenReadyOnQueue:usingBlock:
appendSampleBuffer:
markAsFinished
canAddTrackAssociationWithTrackOfInput:type:
addTrackAssociationWithTrackOfInput:type:
respondToEachPassDescriptionOnQueue:usingBlock:
markCurrentPassAsFinished
initWithAssetWriterInput:sourcePixelBufferAttributes:
appendPixelBuffer:withPresentationTime:
initWithAssetWriterInput:
appendTimedMetadataGroup:
statusOfValueForKey:error:
loadValuesAsynchronouslyForKeys:completionHandler:
initWithPCMFormat:frameCapacity:
initWithFormat:packetCapacity:maximumPacketSize:
initWithFormat:packetCapacity:
initWithLayoutTag:
initWithLayout:
isEqual:
initWithNode:bus:
initFromFormat:toFormat:
convertToBuffer:fromBuffer:error:
convertToBuffer:error:withInputFromBlock:
attachNode:
detachNode:
connect:to:fromBus:toBus:format:
connect:to:format:
connect:toConnectionPoints:fromBus:format:
disconnectNodeInput:bus:
disconnectNodeInput:
disconnectNodeOutput:bus:
disconnectNodeOutput:
prepare
startAndReturnError:
pause
stop
inputConnectionPointForNode:inputBus:
loadFactoryReverbPreset:
initForReading:error:
initForReading:commonFormat:interleaved:error:
initForWriting:settings:error:
initForWriting:settings:commonFormat:interleaved:error:
readIntoBuffer:error:
readIntoBuffer:frameCount:error:
writeFromBuffer:error:
initWithStreamDescription:
initWithStreamDescription:channelLayout:
initStandardFormatWithSampleRate:channels:
initStandardFormatWithSampleRate:channelLayout:
initWithCommonFormat:sampleRate:channels:interleaved:
initWithCommonFormat:sampleRate:interleaved:channelLayout:
initWithSettings:
initWithCMAudioFormatDescription:
getVolumeRampForTime:startVolume:endVolume:timeRange:
setVolumeRampFromStartVolume:toEndVolume:timeRange:
setVolume:atTime:
destinationForMixer:bus:
inputFormatForBus:
outputFormatForBus:
nameForInputBus:
nameForOutputBus:
installTapOnBus:bufferSize:format:block:
removeTapOnBus:
initWithContentsOfURL:error:
initWithData:error:
initWithContentsOfURL:fileTypeHint:error:
initWithData:fileTypeHint:error:
prepareToPlay
play
playAtTime:
updateMeters
peakPowerForChannel:
averagePowerForChannel:
audioPlayerDidFinishPlaying:successfully:
audioPlayerDecodeErrorDidOccur:error:
audioPlayerBeginInterruption:
audioPlayerEndInterruption:withOptions:
audioPlayerEndInterruption:withFlags:
audioPlayerEndInterruption:
scheduleBuffer:completionHandler:
scheduleBuffer:atTime:options:completionHandler:
scheduleFile:atTime:completionHandler:
scheduleSegment:startingFrame:frameCount:atTime:completionHandler:
prepareWithFrameCount:
nodeTimeForPlayerTime:
playerTimeForNodeTime:
initWithURL:settings:error:
prepareToRecord
record
recordAtTime:
recordForDuration:
recordAtTime:forDuration:
deleteRecording
audioRecorderDidFinishRecording:successfully:
audioRecorderEncodeErrorDidOccur:error:
audioRecorderBeginInterruption:
audioRecorderEndInterruption:withOptions:
audioRecorderEndInterruption:withFlags:
audioRecorderEndInterruption:
init	__TVOS_UNAVAILABLE
initWithAudioEngine:
loadFromURL:options:error:
loadFromData:options:error:
writeToURL:SMPTEResolution:replaceExisting:error:
dataWithSMPTEResolution:error:
secondsForBeats:
beatsForSeconds:
hostTimeForBeats:error:
beatsForHostTime:error:
setActive:error:
setActive:withOptions:error:
setCategory:error:
setCategory:withOptions:error:
recordPermission
requestRecordPermission:
setMode:error:
overrideOutputAudioPort:error:
setPreferredInput:error:
setPreferredSampleRate:error:
setPreferredIOBufferDuration:error:
setPreferredInputNumberOfChannels:error:
setPreferredOutputNumberOfChannels:error:
setInputGain:error:
setInputDataSource:error:
setOutputDataSource:error:
setActive:withFlags:error:
setPreferredHardwareSampleRate:error:
setPreferredDataSource:error:
setPreferredPolarPattern:error:
beginInterruption
endInterruptionWithFlags:
endInterruption
inputIsAvailableChanged:
initWithAudioTimeStamp:sampleRate:
initWithHostTime:
initWithSampleTime:atRate:
initWithHostTime:sampleTime:atRate:
extrapolateTimeFromAnchor:
loadAudioUnitPresetAtURL:error:
supportsNumberInputChannels:outputChannels:
loadFactoryPreset:
initWithAudioComponentDescription:
initWithNumberOfBands:
startNote:withVelocity:onChannel:
stopNote:onChannel:
sendController:withValue:onChannel:
sendPitchBend:onChannel:
sendPressure:onChannel:
sendPressureForKey:withValue:onChannel:
sendProgramChange:onChannel:
sendProgramChange:bankMSB:bankLSB:onChannel:
sendMIDIEvent:data1:data2:
sendMIDIEvent:data1:
sendMIDISysExEvent:
loadSoundBankInstrumentAtURL:program:bankMSB:bankLSB:error:
loadInstrumentAtURL:error:
loadAudioFilesAtURLs:error:
hasMediaType:
lockForConfiguration:
unlockForConfiguration
supportsAVCaptureSessionPreset:
isFlashModeSupported:
isTorchModeSupported:
setTorchModeOnWithLevel:error:
isFocusModeSupported:
setFocusModeLockedWithLensPosition:completionHandler:
isExposureModeSupported:
setExposureModeCustomWithDuration:ISO:completionHandler:
setExposureTargetBias:completionHandler:
isWhiteBalanceModeSupported:
setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:completionHandler:
chromaticityValuesForDeviceWhiteBalanceGains:
deviceWhiteBalanceGainsForChromaticityValues:
temperatureAndTintValuesForDeviceWhiteBalanceGains:
deviceWhiteBalanceGainsForTemperatureAndTintValues:
rampToVideoZoomFactor:withRate:
cancelVideoZoomRamp
setTransportControlsPlaybackMode:speed:
isVideoStabilizationModeSupported:
initWithDevice:error:
initWithDisplayID:
initWithFormatDescription:clock:
appendTimedMetadataGroup:error:
connectionWithMediaType:
transformedMetadataObjectForMetadataObject:connection:
metadataOutputRectOfInterestForRect:
rectForMetadataOutputRectOfInterest:
setSampleBufferDelegate:queue:
recommendedVideoSettingsForAssetWriterWithOutputFileType:
captureOutput:didOutputSampleBuffer:fromConnection:
captureOutput:didDropSampleBuffer:fromConnection:
recommendedAudioSettingsForAssetWriterWithOutputFileType:
startRecordingToOutputFileURL:recordingDelegate:
stopRecording
pauseRecording
resumeRecording
captureOutput:didStartRecordingToOutputFileAtURL:fromConnections:
captureOutput:didPauseRecordingToOutputFileAtURL:fromConnections:
captureOutput:didResumeRecordingToOutputFileAtURL:fromConnections:
captureOutput:willFinishRecordingToOutputFileAtURL:fromConnections:error:
captureOutput:didFinishRecordingToOutputFileAtURL:fromConnections:error:
captureOutputShouldProvideSampleAccurateRecordingStart:
outputSettingsForConnection:
setOutputSettings:forConnection:
recordsVideoOrientationAndMirroringChangesAsMetadataTrackForConnection:
setRecordsVideoOrientationAndMirroringChanges:asMetadataTrackForConnection:
startRecordingToOutputFileURL:outputFileType:recordingDelegate:
captureStillImageAsynchronouslyFromConnection:completionHandler:
prepareToCaptureStillImageBracketFromConnection:withSettingsArray:completionHandler:
captureStillImageBracketAsynchronouslyFromConnection:withSettingsArray:completionHandler:
setMetadataObjectsDelegate:queue:
captureOutput:didOutputMetadataObjects:fromConnection:
canSetSessionPreset:
removeInput:
removeOutput:
addInputWithNoConnections:
addOutputWithNoConnections:
canAddConnection:
addConnection:
removeConnection:
beginConfiguration
commitConfiguration
startRunning
stopRunning
initWithInputPorts:output:
initWithInputPort:videoPreviewLayer:
initWithSession:
initWithSessionWithNoConnection:
setSessionWithNoConnection:
captureDevicePointOfInterestForPoint:
pointForCaptureDevicePointOfInterest:
transformedMetadataObjectForMetadataObject:
insertTimeRange:ofAsset:atTime:error:
insertEmptyTimeRange:
removeTimeRange:
scaleTimeRange:toDuration:
addMutableTrackWithMediaType:preferredTrackID:
removeTrack:
mutableTrackCompatibleWithTrack:
insertTimeRange:ofTrack:atTime:error:
insertTimeRanges:ofTracks:atTime:error:
validateTrackSegments:error:
initWithURL:trackID:sourceTimeRange:targetTimeRange:
initWithTimeRange:
selectedMediaOptionInMediaSelectionGroup:
mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup:
selectMediaOption:inMediaSelectionGroup:
mediaSelectionOptionWithPropertyList:
associatedMediaSelectionOptionInMediaSelectionGroup:
propertyList
displayNameWithLocale:
respondWithValue:
respondWithError:
initWithContentsOfURL:soundBankURL:error:
initWithData:soundBankURL:error:
play:
initWithURL:
initWithPlayerItem:
replaceCurrentItemWithPlayerItem:
currentTime
seekToDate:
seekToDate:completionHandler:
seekToTime:
seekToTime:toleranceBefore:toleranceAfter:
seekToTime:completionHandler:
seekToTime:toleranceBefore:toleranceAfter:completionHandler:
setRate:time:atHostTime:
prerollAtRate:completionHandler:
cancelPendingPrerolls
addPeriodicTimeObserverForInterval:queue:usingBlock:
addBoundaryTimeObserverForTimes:queue:usingBlock:
removeTimeObserver:
setMediaSelectionCriteria:forMediaCharacteristic:
mediaSelectionCriteriaForMediaCharacteristic:
initWithItems:
advanceToNextItem
canInsertItem:afterItem:
insertItem:afterItem:
removeItem:
removeAllItems
initWithAsset:automaticallyLoadedAssetKeys:
cancelPendingSeeks
currentDate
stepByCount:
selectMediaOptionAutomaticallyInMediaSelectionGroup:
accessLog
errorLog
addMediaDataCollector:
removeMediaDataCollector:
extendedLogData
initWithIdentifiers:classifyingLabels:
metadataCollector:didCollectDateRangeMetadataGroups:indexesOfNewGroups:indexesOfModifiedGroups:
itemTimeForHostTime:
itemTimeForMachAbsoluteTime:
itemTimeForCVTimeStamp:
initWithPixelBufferAttributes:
hasNewPixelBufferForItemTime:
copyPixelBufferForItemTime:itemTimeForDisplay:
requestNotificationOfMediaDataChangeWithAdvanceInterval:
outputMediaDataWillChange:
outputSequenceWasFlushed:
initWithMediaSubtypesForNativeRepresentation:
legibleOutput:didOutputAttributedStrings:nativeSampleBuffers:forItemTime:
initWithIdentifiers:
metadataOutput:didOutputTimedMetadataGroups:fromPlayerItemTrack:
initWithPreferredLanguages:preferredMediaCharacteristics:
enqueueSampleBuffer:
flush
flushAndRemoveImage
stopRequestingMediaData
initWithString:
speakUtterance:
stopSpeakingAtBoundary:
pauseSpeakingAtBoundary:
continueSpeaking
speechSynthesizer:didStartSpeechUtterance:
speechSynthesizer:didFinishSpeechUtterance:
speechSynthesizer:didPauseSpeechUtterance:
speechSynthesizer:didContinueSpeechUtterance:
speechSynthesizer:didCancelSpeechUtterance:
speechSynthesizer:willSpeakRangeOfSpeechString:utterance:
initWithTextMarkupAttributes:
initWithTextMarkupAttributes:textSelector:
encodeCMTime:forKey:
decodeCMTimeForKey:
encodeCMTimeRange:forKey:
decodeCMTimeRangeForKey:
encodeCMTimeMapping:forKey:
decodeCMTimeMappingForKey:
initWithItems:timeRange:
initWithSampleBuffer:
copyFormatDescription
initWithItems:startDate:endDate:
newPixelBuffer CF_RETURNS_RETAINED
renderContextChanged:
startVideoCompositionRequest:
cancelAllPendingVideoCompositionRequests
sourceFrameByTrackID:
finishWithComposedVideoFrame:
finishWithError:
finishCancelledRequest
finishWithImage:context:
getTransformRampForTime:startTransform:endTransform:timeRange:
getOpacityRampForTime:startOpacity:endOpacity:timeRange:
getCropRectangleRampForTime:startCropRectangle:endCropRectangle:timeRange:
setTransformRampFromStartTransform:toEndTransform:timeRange:
setTransform:atTime:
setOpacityRampFromStartOpacity:toEndOpacity:timeRange:
setOpacity:atTime:
setCropRectangleRampFromStartCropRectangle:toEndCropRectangle:timeRange:
setCropRectangle:atTime:
unusedTrackID
isValidForAsset:timeRange:validationDelegate:
videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:
videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:
videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:
videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:
initWithPlayerLayer:
startPictureInPicture
stopPictureInPicture
pictureInPictureControllerWillStartPictureInPicture:
pictureInPictureControllerDidStartPictureInPicture:
pictureInPictureController:failedToStartPictureInPictureWithError:
pictureInPictureControllerWillStopPictureInPicture:
pictureInPictureControllerDidStopPictureInPicture:
pictureInPictureController:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:
playerViewControllerWillStartPictureInPicture:
playerViewControllerDidStartPictureInPicture:
playerViewController:failedToStartPictureInPictureWithError:
playerViewControllerWillStopPictureInPicture:
playerViewControllerDidStopPictureInPicture:
playerViewControllerShouldAutomaticallyDismissAtPictureInPictureStart:
playerViewController:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:
initWithFileURL:
addOperation:
accountStatusWithCompletionHandler:
statusForApplicationPermission:completionHandler:
requestApplicationPermission:completionHandler:
fetchUserRecordIDWithCompletionHandler:
discoverAllContactUserInfosWithCompletionHandler:
discoverUserInfoWithEmailAddress:completionHandler:
discoverUserInfoWithUserRecordID:completionHandler:
fetchAllLongLivedOperationIDsWithCompletionHandler:
fetchLongLivedOperationWithID:completionHandler:
fetchRecordWithID:completionHandler:
saveRecord:completionHandler:
deleteRecordWithID:completionHandler:
performQuery:inZoneWithID:completionHandler:
fetchAllRecordZonesWithCompletionHandler:
fetchRecordZoneWithID:completionHandler:
saveRecordZone:completionHandler:
deleteRecordZoneWithID:completionHandler:
fetchSubscriptionWithID:completionHandler:
fetchAllSubscriptionsWithCompletionHandler:
saveSubscription:completionHandler:
deleteSubscriptionWithID:completionHandler:
initWithEmailAddresses:userRecordIDs:
initWithPreviousServerChangeToken:
initWithRecordZoneID:previousServerChangeToken:
initWithRecordIDs:
initWithRecordZoneIDs:
initWithSubscriptionIDs:
initWithAPIToken:
initWithKey:relativeLocation:
initWithCoder:
initWithNotificationIDsToMarkRead:
initWithBadgeValue:
initWithRecordsToSave:recordIDsToDelete:
initWithRecordZonesToSave:recordZoneIDsToDelete:
initWithSubscriptionsToSave:subscriptionIDsToDelete:
initWithRecordType:predicate:
initWithQuery:
initWithCursor:
initWithRecordType:
initWithRecordType:recordID:
initWithRecordType:zoneID:
setObject:forKey:
setObject:forKeyedSubscript:
encodeSystemFieldsWithCoder:
initWithRecordName:
initWithRecordName:zoneID:
initWithZoneName:
initWithZoneID:
initWithZoneName:ownerName:
initWithRecordID:action:
initWithRecord:action:
initWithRecordType:predicate:options:
initWithRecordType:predicate:subscriptionID:options:
initWithZoneID:options:
initWithZoneID:subscriptionID:options:
isKeyAvailable:
areKeysAvailable:
isUnifiedWithContactWithIdentifier:
initWithKeysToFetch:
stringFromContact:
attributedStringFromContact:defaultAttributes:
initWithName:
requestAccessForEntityType:completionHandler:
unifiedContactWithIdentifier:keysToFetch:error:
unifiedMeContactWithKeysToFetch:error:
enumerateContactsWithFetchRequest:error:usingBlock:
executeSaveRequest:error:
defaultContainerIdentifier
initWithUsername:service:
initWithLabel:value:
labeledValueBySettingLabel:
labeledValueBySettingValue:
labeledValueBySettingLabel:value:
initWithStringValue:
stringFromPostalAddress:
attributedStringFromPostalAddress:withDefaultAttributes:
addContact:toContainerWithIdentifier:
updateContact:
deleteContact:
addGroup:toContainerWithIdentifier:
updateGroup:
deleteGroup:
addSubgroup:toGroup:
removeSubgroup:fromGroup:
addMember:toGroup:
removeMember:fromGroup:
initWithUrlString:username:userIdentifier:service:
contactPickerDidCancel:
contactPicker:didSelectContact:
contactPicker:didSelectContactProperty:
contactPicker:didSelectContacts:
contactPicker:didSelectContactProperties:
highlightPropertyWithKey:identifier:
contactViewController:shouldPerformDefaultActionForContactProperty:
contactViewController:didCompleteWithContact:
requestViewControllerWithCompletionHandler:
setOutputAudioUnit:
contentWidth
initWithDelegate:queue:
initWithDelegate:queue:options:
scanForPeripheralsWithServices:options:
stopScan
connectPeripheral:options:
cancelPeripheralConnection:
centralManagerDidUpdateState:
centralManager:willRestoreState:
centralManager:didDiscoverPeripheral:advertisementData:RSSI:
centralManager:didConnectPeripheral:
centralManager:didFailToConnectPeripheral:error:
centralManager:didDisconnectPeripheral:error:
initWithType:properties:value:permissions:
initWithType:value:
readRSSI
discoverServices:
discoverIncludedServices:forService:
discoverCharacteristics:forService:
readValueForCharacteristic:
maximumWriteValueLengthForType:
writeValue:forCharacteristic:type:
setNotifyValue:forCharacteristic:
discoverDescriptorsForCharacteristic:
readValueForDescriptor:
writeValue:forDescriptor:
peripheralDidUpdateName:
peripheral:didModifyServices:
peripheralDidUpdateRSSI:error:
peripheral:didReadRSSI:error:
peripheral:didDiscoverServices:
peripheral:didDiscoverIncludedServicesForService:error:
peripheral:didDiscoverCharacteristicsForService:error:
peripheral:didUpdateValueForCharacteristic:error:
peripheral:didWriteValueForCharacteristic:error:
peripheral:didUpdateNotificationStateForCharacteristic:error:
peripheral:didDiscoverDescriptorsForCharacteristic:error:
peripheral:didUpdateValueForDescriptor:error:
peripheral:didWriteValueForDescriptor:error:
startAdvertising:
stopAdvertising
setDesiredConnectionLatency:forCentral:
addService:
removeService:
removeAllServices
respondToRequest:withResult:
updateValue:forCharacteristic:onSubscribedCentrals:
peripheralManagerDidUpdateState:
peripheralManager:willRestoreState:
peripheralManagerDidStartAdvertising:error:
peripheralManager:didAddService:error:
peripheralManager:central:didSubscribeToCharacteristic:
peripheralManager:central:didUnsubscribeFromCharacteristic:
peripheralManager:didReceiveReadRequest:
peripheralManager:didReceiveWriteRequests:
peripheralManagerIsReadyToUpdateSubscribers:
initWithType:primary:
initWithPersistentStoreCoordinator:configurationName:URL:options:
load:
save:
newCacheNodeForManagedObject:
updateCacheNode:fromManagedObject:
addCacheNodes:
willRemoveCacheNodes:
cacheNodeForObjectID:
objectIDForEntity:referenceObject:
newReferenceObjectForManagedObject:
referenceObjectForObjectID:
initWithObjectID:
valueForKey:
setValue:forKey:
initWithFetchRequest:
initWithObjectIDs:
initWithEntityName:
initWithEntity:
isKindOfEntity:
beginEntityMapping:manager:error:
createDestinationInstancesForSourceInstance:entityMapping:manager:error:
endInstanceCreationForEntityMapping:manager:error:
createRelationshipsForDestinationInstance:entityMapping:manager:error:
endRelationshipCreationForEntityMapping:manager:error:
performCustomValidationForEntityMapping:manager:error:
endEntityMapping:manager:error:
initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:
performFetch:
objectAtIndexPath:
indexPathForObject:
sectionIndexTitleForSectionName:
sectionForSectionIndexTitle:atIndex:
controller:didChangeObject:atIndexPath:forChangeType:newIndexPath:
controller:didChangeSection:atIndex:forChangeType:
controllerWillChangeContent:
controllerDidChangeContent:
controller:sectionIndexTitleForSectionName:
loadMetadata:
executeRequest:withContext:error:
newValuesForObjectWithID:withContext:error:
newValueForRelationship:forObjectWithID:withContext:error:
managedObjectContextDidRegisterObjectsWithIDs:
managedObjectContextDidUnregisterObjectsWithIDs:
newObjectIDForEntity:referenceObject:
initWithObjectID:withValues:version:
updateWithValues:version:
valueForPropertyDescription:
initWithEntity:insertIntoManagedObjectContext:
hasFaultForRelationshipNamed:
willAccessValueForKey:
didAccessValueForKey:
willChangeValueForKey:
didChangeValueForKey:
willChangeValueForKey:withSetMutation:usingObjects:
didChangeValueForKey:withSetMutation:usingObjects:
awakeFromFetch
awakeFromInsert
awakeFromSnapshotEvents:
prepareForDeletion
willSave
didSave
willTurnIntoFault
didTurnIntoFault
primitiveValueForKey:
setPrimitiveValue:forKey:
validateValue:forKey:error:
validateForDelete:
validateForInsert:
validateForUpdate:
initWithConcurrencyType:
performBlock:
performBlockAndWait:
objectRegisteredForID:
objectWithID:
existingObjectWithID:error:
executeFetchRequest:error:
countForFetchRequest:error:
executeRequest:error:
insertObject:
deleteObject:
refreshObject:mergeChanges:
detectConflictsForObject:
observeValueForKeyPath:ofObject:change:context:
processPendingChanges
assignObject:toPersistentStore:
undo
redo
rollback
refreshAllObjects
lock
unlock
tryLock
shouldHandleInaccessibleFault:forObjectID:triggeredByProperty:
obtainPermanentIDsForObjects:error:
mergeChangesFromContextDidSaveNotification:
URIRepresentation
initWithContentsOfURL:
setEntities:forConfiguration:
setFetchRequestTemplate:forName:
fetchRequestTemplateForName:
fetchRequestFromTemplateWithName:substitutionVariables:
isConfiguration:compatibleWithStoreMetadata:
initWithSource:newVersion:oldVersion:cachedSnapshot:persistedSnapshot:
initWithConstraint:databaseObject:databaseSnapshot:conflictingObjects:conflictingSnapshots:
initWithMergeType:
resolveConflicts:error:
resolveOptimisticLockingVersionConflicts:error:
resolveConstraintConflicts:error:
initWithSourceModel:destinationModel:
migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:
sourceEntityForEntityMapping:
destinationEntityForEntityMapping:
associateSourceInstance:withDestinationInstance:forEntityMapping:
cancelMigrationWithError:
didAddToPersistentStoreCoordinator:
willRemoveFromPersistentStoreCoordinator:
initWithManagedObjectModel:
persistentStoreForURL:
URLForPersistentStore:
setURL:forPersistentStore:
addPersistentStoreWithType:configuration:URL:options:error:
removePersistentStore:error:
setMetadata:forPersistentStore:
managedObjectIDForURIRepresentation:
migratePersistentStore:toURL:options:withType:error:
destroyPersistentStoreAtURL:withType:options:error:
replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:
initWithFetchRequest:completionBlock:
cancel
setValidationPredicates:withValidationWarnings:
initWithInsertedObjects:updatedObjects:deletedObjects:lockedObjects:
initWithCGColor:
initWithRed:green:blue:alpha:
initWithRed:green:blue:
drawImage:atPoint:fromRect:
drawImage:inRect:fromRect:
createCGImage:fromRect:
createCGImage:fromRect:format:colorSpace:
createCGLayerWithSize:info:
render:toBitmap:rowBytes:bounds:format:colorSpace:
render:toIOSurface:bounds:colorSpace:
render:toCVPixelBuffer:
render:toCVPixelBuffer:bounds:colorSpace:
render:toMTLTexture:commandBuffer:bounds:colorSpace:
reclaimResources
clearCaches
inputImageMaximumSize
outputImageMaximumSize
setDefaults
apply:arguments:options:
apply:
filterWithName:
initWithRect:
transformBy:interior:
insetByX:Y:
unionWith:
unionWithRect:
intersectWith:
intersectWithRect:
initWithCGImage:
initWithCGImage:options:
initWithCGLayer:
initWithCGLayer:options:
initWithData:
initWithData:options:
initWithBitmapData:bytesPerRow:size:format:colorSpace:
initWithTexture:size:flipped:colorSpace:
initWithTexture:size:flipped:options:
initWithMTLTexture:options:
initWithContentsOfURL:options:
initWithIOSurface:
initWithIOSurface:options:
initWithIOSurface:plane:format:options:
initWithCVImageBuffer:
initWithCVImageBuffer:options:
initWithCVPixelBuffer:
initWithCVPixelBuffer:options:
initWithColor:
imageByApplyingTransform:
imageByApplyingOrientation:
imageTransformForOrientation:
imageByCompositingOverImage:
imageByCroppingToRect:
imageByClampingToExtent
imageByApplyingFilter:withInputParameters:
regionOfInterestForImage:inRect:
initWithExtent:format:
initWithExtent:format:colorSpace:
image
setImage:
setImage:dirtyRect:
clear
initWithImageProvider:size::format:colorSpace:options:
provideImageData:bytesPerRow:origin::size::userInfo:
setROISelector:
applyWithExtent:roiCallback:arguments:
applyWithExtent:arguments:
applyWithExtent:roiCallback:inputImage:arguments:
initWithImage:
initWithImage:options:
initWithValues:count:
initWithX:
initWithX:Y:
initWithX:Y:Z:
initWithX:Y:Z:W:
initWithCGPoint:
initWithCGRect:
initWithCGAffineTransform:
valueAtIndex:
initWithProximityUUID:identifier:
initWithProximityUUID:major:identifier:
initWithProximityUUID:major:minor:identifier:
initWithCenter:radius:identifier:
containsCoordinate:
reverseGeocodeLocation:completionHandler:
geocodeAddressDictionary:completionHandler:
geocodeAddressString:completionHandler:
geocodeAddressString:inRegion:completionHandler:
cancelGeocode
initWithLatitude:longitude:
initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:
initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:
getDistanceFrom:
distanceFromLocation:
startMonitoringVisits
stopMonitoringVisits
requestWhenInUseAuthorization __OSX_AVAILABLE_STARTING(__MAC_NA, __IPHONE_8_0)
requestAlwaysAuthorization __OSX_AVAILABLE_STARTING(__MAC_NA, __IPHONE_8_0)
startUpdatingLocation
stopUpdatingLocation
requestLocation __OSX_AVAILABLE_STARTING(__MAC_NA, __IPHONE_9_0)
startUpdatingHeading __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
stopUpdatingHeading __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
dismissHeadingCalibrationDisplay __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
startMonitoringSignificantLocationChanges __OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_0)
stopMonitoringSignificantLocationChanges __OSX_AVAILABLE_STARTING(__MAC_10_7,__IPHONE_4_0)
startMonitoringForRegion:desiredAccuracy:
stopMonitoringForRegion:
startMonitoringForRegion:
requestStateForRegion:
startRangingBeaconsInRegion:
stopRangingBeaconsInRegion:
allowDeferredLocationUpdatesUntilTraveled:timeout:
disallowDeferredLocationUpdates __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_6_0)
locationManager:didUpdateToLocation:fromLocation:
locationManager:didUpdateLocations:
locationManager:didUpdateHeading:
locationManagerShouldDisplayHeadingCalibration:
locationManager:didDetermineState:forRegion:
locationManager:didRangeBeacons:inRegion:
locationManager:rangingBeaconsDidFailForRegion:withError:
locationManager:didEnterRegion:
locationManager:didExitRegion:
locationManager:didFailWithError:
locationManager:monitoringDidFailForRegion:withError:
locationManager:didChangeAuthorizationStatus:
locationManager:didStartMonitoringForRegion:
locationManagerDidPauseLocationUpdates:
locationManagerDidResumeLocationUpdates:
locationManager:didFinishDeferredUpdatesWithError:
locationManager:didVisit:
initWithPlacemark:
initCircularRegionWithCenter:radius:identifier:
hasSameAddressAs:
addContact:
removeContact:
sourceEndpoint
destinationEndpoint
startRelativeAltitudeUpdatesToQueue:withHandler:
stopRelativeAltitudeUpdates
multiplyByInverseOfAttitude:
queryActivityStartingFromDate:toDate:toQueue:withHandler:
startActivityUpdatesToQueue:withHandler:
stopActivityUpdates
startAccelerometerUpdates
startAccelerometerUpdatesToQueue:withHandler:
stopAccelerometerUpdates
startGyroUpdates
startGyroUpdatesToQueue:withHandler:
stopGyroUpdates
startMagnetometerUpdates
startMagnetometerUpdatesToQueue:withHandler:
stopMagnetometerUpdates
startDeviceMotionUpdates
startDeviceMotionUpdatesToQueue:withHandler:
startDeviceMotionUpdatesUsingReferenceFrame:
startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:
stopDeviceMotionUpdates
queryPedometerDataFromDate:toDate:withHandler:
startPedometerUpdatesFromDate:withHandler:
stopPedometerUpdates
accelerometerDataFromDate:toDate:
recordAccelerometerForDuration:
queryStepCountStartingFrom:to:toQueue:withHandler:
startStepCountingUpdatesToQueue:updateOn:withHandler:
stopStepCountingUpdates
initWithDisplayName:handles:handleIdentifier:
initWithName:protectionClass:
indexSearchableItems:completionHandler:
deleteSearchableItemsWithIdentifiers:completionHandler:
deleteSearchableItemsWithDomainIdentifiers:completionHandler:
deleteAllSearchableItemsWithCompletionHandler:
beginIndexBatch
endIndexBatchWithClientState:completionHandler:
fetchLastClientStateWithCompletionHandler:
searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:
searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:
searchableIndexDidThrottle:
searchableIndexDidFinishThrottle:
initWithUniqueIdentifier:domainIdentifier:attributeSet:
initWithItemContentType:
initWithLocalizedStrings:
localizedString
initWithKeyName:
initWithKeyName:searchable:searchableByDefault:unique:multiValued:
setValue:forCustomKey:
addAlarm:
removeAlarm:
addRecurrenceRule:
removeRecurrenceRule:
compareStartDateWithEvent:
refresh
initWithAccessToEntityTypes:
initWithSources:
requestAccessToEntityType:completion:
sourceWithIdentifier:
defaultCalendarForNewReminders
calendarWithIdentifier:
saveCalendar:commit:error:
removeCalendar:commit:error:
calendarItemWithIdentifier:
saveEvent:span:error:
removeEvent:span:error:
saveEvent:span:commit:error:
removeEvent:span:commit:error:
eventWithIdentifier:
enumerateEventsMatchingPredicate:usingBlock:
predicateForEventsWithStartDate:endDate:calendars:
saveReminder:commit:error:
removeReminder:commit:error:
fetchRemindersMatchingPredicate:completion:
cancelFetchRequest:
predicateForRemindersInCalendars:
predicateForIncompleteRemindersWithDueDateStarting:ending:calendars:
predicateForCompletedRemindersWithCompletionDateStarting:ending:calendars:
commit:
refreshSourcesIfNecessary
isNew
ABRecordWithAddressBook:
ABPersonInAddressBook:
initWithDayOfTheWeek:weekNumber:
initRecurrenceWithFrequency:interval:end:
initRecurrenceWithFrequency:interval:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:
initWithSelectionStyle:displayStyle:eventStore:
initWithSelectionStyle:displayStyle:entityType:eventStore:
calendarChooserSelectionDidChange:
calendarChooserDidFinish:
calendarChooserDidCancel:
cancelEditing
eventEditViewController:didCompleteWithAction:
eventEditViewControllerDefaultCalendarForNewEvents:
eventViewController:didCompleteWithAction:
accessoryDidDisconnect:
showBluetoothAccessoryPickerWithNameFilter:completion:
registerForLocalNotifications __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
unregisterForLocalNotifications __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_3_0)
initWithAccessory:forProtocol:
startSearchingForUnconfiguredAccessoriesMatchingPredicate:
stopSearchingForUnconfiguredAccessories
configureAccessory:withConfigurationUIOnViewController:
accessoryBrowser:didUpdateState:
accessoryBrowser:didFindUnconfiguredAccessories:
accessoryBrowser:didRemoveUnconfiguredAccessories:
accessoryBrowser:didFinishConfiguringAccessory:withStatus:
objectAtIndex:
initWithObjects:count:
componentsJoinedByString:
containsObject:
descriptionWithLocale:
descriptionWithLocale:indent:
firstObjectCommonWithArray:
getObjects:range:
indexOfObject:
indexOfObject:inRange:
indexOfObjectIdenticalTo:
indexOfObjectIdenticalTo:inRange:
isEqualToArray:
writeToFile:atomically:
writeToURL:atomically:
makeObjectsPerformSelector:
makeObjectsPerformSelector:withObject:
enumerateObjectsUsingBlock:
enumerateObjectsWithOptions:usingBlock:
enumerateObjectsAtIndexes:options:usingBlock:
indexOfObjectPassingTest:
indexOfObjectWithOptions:passingTest:
indexOfObjectAtIndexes:options:passingTest:
indexesOfObjectsPassingTest:
indexesOfObjectsWithOptions:passingTest:
indexesOfObjectsAtIndexes:options:passingTest:
indexOfObject:inSortedRange:options:usingComparator:
initWithObjects:
initWithArray:
initWithArray:copyItems:
getObjects:
addObject:
insertObject:atIndex:
removeLastObject
removeObjectAtIndex:
replaceObjectAtIndex:withObject:
initWithCapacity:
addObjectsFromArray:
exchangeObjectAtIndex:withObjectAtIndex:
removeAllObjects
removeObject:inRange:
removeObject:
removeObjectIdenticalTo:inRange:
removeObjectIdenticalTo:
removeObjectsFromIndices:numIndices:
removeObjectsInArray:
removeObjectsInRange:
replaceObjectsInRange:withObjectsFromArray:range:
replaceObjectsInRange:withObjectsFromArray:
setArray:
sortUsingFunction:context:
sortUsingSelector:
insertObjects:atIndexes:
removeObjectsAtIndexes:
replaceObjectsAtIndexes:withObjects:
setObject:atIndexedSubscript:
sortUsingComparator:
sortWithOptions:usingComparator:
attribute:atIndex:effectiveRange:
attributedSubstringFromRange:
attribute:atIndex:longestEffectiveRange:inRange:
isEqualToAttributedString:
initWithString:attributes:
initWithAttributedString:
enumerateAttributesInRange:options:usingBlock:
enumerateAttribute:inRange:options:usingBlock:
replaceCharactersInRange:withString:
setAttributes:range:
addAttribute:value:range:
addAttributes:range:
removeAttribute:range:
replaceCharactersInRange:withAttributedString:
insertAttributedString:atIndex:
appendAttributedString:
deleteCharactersInRange:
setAttributedString:
beginEditing
endEditing
drain
initWithPath:
load
unload
preflightAndReturnError:
loadAndReturnError:
URLForAuxiliaryExecutable:
pathForAuxiliaryExecutable:
URLForResource:withExtension:
URLForResource:withExtension:subdirectory:
URLForResource:withExtension:subdirectory:localization:
pathForResource:ofType:
pathForResource:ofType:inDirectory:
pathForResource:ofType:inDirectory:forLocalization:
localizedStringForKey:value:table:
objectForInfoDictionaryKey:
classNamed:
variantFittingPresentationWidth:
initWithTags:
initWithTags:bundle:
beginAccessingResourcesWithCompletionHandler:
conditionallyBeginAccessingResourcesWithCompletionHandler:
endAccessingResources
setPreservationPriority:forTags:
preservationPriorityForTag:
stringFromByteCount:
objectForKey:
setObject:forKey:cost:
removeObjectForKey:
cache:willEvictObject:
initWithCalendarIdentifier:
minimumRangeOfUnit:
maximumRangeOfUnit:
rangeOfUnit:inUnit:forDate:
ordinalityOfUnit:inUnit:forDate:
rangeOfUnit:startDate:interval:forDate:
dateFromComponents:
components:fromDate:
dateByAddingComponents:toDate:options:
components:fromDate:toDate:options:
getEra:year:month:day:fromDate:
getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:
getHour:minute:second:nanosecond:fromDate:
component:fromDate:
dateWithEra:year:month:day:hour:minute:second:nanosecond:
dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:
startOfDayForDate:
componentsInTimeZone:fromDate:
compareDate:toDate:toUnitGranularity:
isDate:equalToDate:toUnitGranularity:
isDate:inSameDayAsDate:
isDateInToday:
isDateInYesterday:
isDateInTomorrow:
isDateInWeekend:
rangeOfWeekendStartDate:interval:containingDate:
nextWeekendStartDate:interval:options:afterDate:
components:fromDateComponents:toDateComponents:options:
dateByAddingUnit:value:toDate:options:
enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:
nextDateAfterDate:matchingComponents:options:
nextDateAfterDate:matchingUnit:value:options:
nextDateAfterDate:matchingHour:minute:second:options:
dateBySettingUnit:value:ofDate:options:
dateBySettingHour:minute:second:ofDate:options:
date:matchesComponents:
week
setWeek:
setValue:forComponent:
valueForComponent:
isValidDateInCalendar:
characterIsMember:
longCharacterIsMember:
isSupersetOfSet:
hasMemberInPlane:
addCharactersInRange:
removeCharactersInRange:
addCharactersInString:
removeCharactersInString:
formUnionWithCharacterSet:
formIntersectionWithCharacterSet:
invert
encodeValueOfObjCType:at:
encodeDataObject:
decodeValueOfObjCType:at:
decodeDataObject
versionForClassName:
encodeObject:
encodeRootObject:
encodeBycopyObject:
encodeByrefObject:
encodeConditionalObject:
encodeValuesOfObjCTypes:
encodeArrayOfObjCType:count:at:
encodeBytes:length:
decodeObject
decodeTopLevelObjectAndReturnError:
decodeValuesOfObjCTypes:
decodeArrayOfObjCType:count:at:
decodeBytesWithReturnedLength:
encodePropertyList:
decodePropertyList
setObjectZone:
objectZone
encodeObject:forKey:
encodeConditionalObject:forKey:
encodeBool:forKey:
encodeInt:forKey:
encodeInt32:forKey:
encodeInt64:forKey:
encodeFloat:forKey:
encodeDouble:forKey:
encodeBytes:length:forKey:
containsValueForKey:
decodeObjectForKey:
decodeTopLevelObjectForKey:error:
decodeBoolForKey:
decodeIntForKey:
decodeInt32ForKey:
decodeInt64ForKey:
decodeFloatForKey:
decodeDoubleForKey:
decodeBytesForKey:returnedLength:
encodeInteger:forKey:
decodeIntegerForKey:
decodeObjectOfClass:forKey:
decodeTopLevelObjectOfClass:forKey:error:
decodeObjectOfClasses:forKey:
decodeTopLevelObjectOfClasses:forKey:error:
decodePropertyListForKey:
failWithError:
encodeNXObject:
decodeNXObject
initWithLeftExpression:rightExpression:modifier:type:options:
initWithLeftExpression:rightExpression:customSelector:
initWithType:subpredicates:
getBytes:length:
getBytes:range:
isEqualToData:
subdataWithRange:
writeToFile:options:error:
writeToURL:options:error:
rangeOfData:options:range:
enumerateByteRangesUsingBlock:
initWithBytes:length:
initWithBytesNoCopy:length:
initWithBytesNoCopy:length:freeWhenDone:
initWithBytesNoCopy:length:deallocator:
initWithContentsOfFile:options:error:
initWithContentsOfURL:options:error:
initWithContentsOfFile:
initWithBase64EncodedString:options:
base64EncodedStringWithOptions:
initWithBase64EncodedData:options:
base64EncodedDataWithOptions:
getBytes:
initWithContentsOfMappedFile:
initWithBase64Encoding:
base64Encoding
appendBytes:length:
appendData:
increaseLengthBy:
replaceBytesInRange:withBytes:
resetBytesInRange:
setData:
replaceBytesInRange:withBytes:length:
initWithLength:
initWithTimeIntervalSinceReferenceDate:
timeIntervalSinceDate:
addTimeInterval:
dateByAddingTimeInterval:
earlierDate:
laterDate:
compare:
isEqualToDate:
initWithTimeIntervalSinceNow:
initWithTimeIntervalSince1970:
initWithTimeInterval:sinceDate:
stringForObjectValue:
stringFromDateComponents:
stringFromDate:toDate:
stringFromTimeInterval:
getObjectValue:forString:errorDescription:
getObjectValue:forString:range:error:
stringFromDate:
dateFromString:
setLocalizedDateFormatFromTemplate:
initWithDateFormat:allowNaturalLanguage:
allowsNaturalLanguage
roundingMode
exceptionDuringOperation:error:leftOperand:rightOperand:
initWithMantissa:exponent:isNegative:
initWithDecimal:
initWithString:locale:
decimalNumberByAdding:
decimalNumberByAdding:withBehavior:
decimalNumberBySubtracting:
decimalNumberBySubtracting:withBehavior:
decimalNumberByMultiplyingBy:
decimalNumberByMultiplyingBy:withBehavior:
decimalNumberByDividingBy:
decimalNumberByDividingBy:withBehavior:
decimalNumberByRaisingToPower:
decimalNumberByRaisingToPower:withBehavior:
decimalNumberByMultiplyingByPowerOf10:
decimalNumberByMultiplyingByPowerOf10:withBehavior:
decimalNumberByRoundingAccordingToBehavior:
initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:
scanDecimal:
initWithObjects:forKeys:count:
isEqualToDictionary:
getObjects:andKeys:count:
objectForKeyedSubscript:
enumerateKeysAndObjectsUsingBlock:
enumerateKeysAndObjectsWithOptions:usingBlock:
getObjects:andKeys:
initWithObjectsAndKeys:
initWithDictionary:
initWithDictionary:copyItems:
initWithObjects:forKeys:
addEntriesFromDictionary:
removeObjectsForKeys:
setDictionary:
stringFromValue:unit:
stringFromJoules:
unitStringFromValue:unit:
unitStringFromJoules:usedUnit:
countByEnumeratingWithState:objects:count:
nextObject
initWithDomain:code:userInfo:
attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:
attemptRecoveryFromError:optionIndex:
initWithName:reason:userInfo:
raise
handleFailureInMethod:object:file:lineNumber:description:
handleFailureInFunction:file:lineNumber:description:
initWithExpressionType:
expressionValueWithObject:context:
allowEvaluation
completeRequestReturningItems:completionHandler:
cancelRequestWithError:
openURL:completionHandler:
beginRequestWithExtensionContext:
initWithFilePresenter:
coordinateAccessWithIntents:queue:byAccessor:
coordinateReadingItemAtURL:options:error:byAccessor:
coordinateWritingItemAtURL:options:error:byAccessor:
coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:
coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:
prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:
itemAtURL:willMoveToURL:
itemAtURL:didMoveToURL:
readDataToEndOfFile
readDataOfLength:
writeData:
seekToEndOfFile
seekToFileOffset:
truncateFileAtOffset:
synchronizeFile
closeFile
initWithFileDescriptor:closeOnDealloc:
readInBackgroundAndNotifyForModes:
readInBackgroundAndNotify
readToEndOfFileInBackgroundAndNotifyForModes:
readToEndOfFileInBackgroundAndNotify
acceptConnectionInBackgroundAndNotifyForModes:
acceptConnectionInBackgroundAndNotify
waitForDataInBackgroundAndNotifyForModes:
waitForDataInBackgroundAndNotify
initWithFileDescriptor:
unmountVolumeAtURL:options:completionHandler:
URLForDirectory:inDomain:appropriateForURL:create:error:
getRelationship:ofDirectoryAtURL:toItemAtURL:error:
getRelationship:ofDirectory:inDomain:toItemAtURL:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
createSymbolicLinkAtURL:withDestinationURL:error:
setAttributes:ofItemAtPath:error:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createSymbolicLinkAtPath:withDestinationPath:error:
destinationOfSymbolicLinkAtPath:error:
copyItemAtPath:toPath:error:
moveItemAtPath:toPath:error:
linkItemAtPath:toPath:error:
removeItemAtPath:error:
copyItemAtURL:toURL:error:
moveItemAtURL:toURL:error:
linkItemAtURL:toURL:error:
removeItemAtURL:error:
trashItemAtURL:resultingItemURL:error:
fileAttributesAtPath:traverseLink:
changeFileAttributes:atPath:
directoryContentsAtPath:
fileSystemAttributesAtPath:
pathContentOfSymbolicLinkAtPath:
createSymbolicLinkAtPath:pathContent:
createDirectoryAtPath:attributes:
linkPath:toPath:handler:
copyPath:toPath:handler:
movePath:toPath:handler:
removeFileAtPath:handler:
changeCurrentDirectoryPath:
fileExistsAtPath:
fileExistsAtPath:isDirectory:
isReadableFileAtPath:
isWritableFileAtPath:
isExecutableFileAtPath:
isDeletableFileAtPath:
contentsEqualAtPath:andPath:
displayNameAtPath:
contentsAtPath:
createFileAtPath:contents:attributes:
fileSystemRepresentationWithPath:
stringWithFileSystemRepresentation:length:
replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:
setUbiquitous:itemAtURL:destinationURL:error:
isUbiquitousItemAtURL:
startDownloadingUbiquitousItemAtURL:error:
evictUbiquitousItemAtURL:error:
URLForUbiquityContainerIdentifier:
URLForPublishingUbiquitousItemAtURL:expirationDate:error:
containerURLForSecurityApplicationGroupIdentifier:
fileManager:shouldProceedAfterError:
fileManager:willProcessPath:
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
skipDescendents
skipDescendants
fileSize
fileModificationDate
fileType
filePosixPermissions
fileOwnerAccountName
fileGroupOwnerAccountName
fileSystemNumber
fileSystemFileNumber
fileExtensionHidden
fileHFSCreatorCode
fileHFSTypeCode
fileIsImmutable
fileIsAppendOnly
fileCreationDate
fileOwnerAccountID
fileGroupOwnerAccountID
relinquishPresentedItemToReader:
relinquishPresentedItemToWriter:
savePresentedItemChangesWithCompletionHandler:
accommodatePresentedItemDeletionWithCompletionHandler:
presentedItemDidMoveToURL:
presentedItemDidChange
presentedItemDidGainVersion:
presentedItemDidLoseVersion:
presentedItemDidResolveConflictVersion:
accommodatePresentedSubitemDeletionAtURL:completionHandler:
presentedSubitemDidAppearAtURL:
presentedSubitemAtURL:didMoveToURL:
presentedSubitemDidChangeAtURL:
presentedSubitemAtURL:didGainVersion:
presentedSubitemAtURL:didLoseVersion:
presentedSubitemAtURL:didResolveConflictVersion:
replaceItemAtURL:options:error:
removeAndReturnError:
initWithURL:options:error:
initDirectoryWithFileWrappers:
initRegularFileWithContents:
initSymbolicLinkWithDestinationURL:
initWithSerializedRepresentation:
matchesContentsOfURL:
readFromURL:options:error:
writeToURL:options:originalContentsURL:error:
addFileWrapper:
addRegularFileWithContents:preferredFilename:
removeFileWrapper:
keyForFileWrapper:
initSymbolicLinkWithDestination:
needsToBeUpdatedFromPath:
updateFromPath:
writeToFile:atomically:updateFilenames:
addFileWithPath:
addSymbolicLinkWithDestination:preferredFilename:
symbolicLinkDestination
attributedStringForObjectValue:withDefaultAttributes:
editingStringForObjectValue:
isPartialStringValid:newEditingString:errorDescription:
isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:
initWithOptions:capacity:
initWithPointerFunctions:capacity:
member:
intersectsHashTable:
isEqualToHashTable:
isSubsetOfHashTable:
intersectHashTable:
unionHashTable:
minusHashTable:
initWithProperties:
setCookie:
deleteCookie:
removeCookiesSinceDate:
setCookies:forURL:mainDocumentURL:
storeCookies:forTask:
getCookiesForTask:completionHandler:
initWithIndexes:length:
initWithIndex:
indexPathByAddingIndex:
indexPathByRemovingLastIndex
indexAtPosition:
getIndexes:range:
getIndexes:
initWithIndexesInRange:
initWithIndexSet:
isEqualToIndexSet:
indexGreaterThanIndex:
indexLessThanIndex:
indexGreaterThanOrEqualToIndex:
indexLessThanOrEqualToIndex:
getIndexes:maxCount:inIndexRange:
countOfIndexesInRange:
containsIndex:
containsIndexesInRange:
containsIndexes:
intersectsIndexesInRange:
enumerateIndexesUsingBlock:
enumerateIndexesWithOptions:usingBlock:
enumerateIndexesInRange:options:usingBlock:
indexPassingTest:
indexWithOptions:passingTest:
indexInRange:options:passingTest:
indexesPassingTest:
indexesWithOptions:passingTest:
indexesInRange:options:passingTest:
enumerateRangesUsingBlock:
enumerateRangesWithOptions:usingBlock:
enumerateRangesInRange:options:usingBlock:
addIndexes:
removeIndexes:
removeAllIndexes
addIndex:
removeIndex:
addIndexesInRange:
removeIndexesInRange:
shiftIndexesStartingAtIndex:by:
retainArguments
getReturnValue:
setReturnValue:
getArgument:atIndex:
setArgument:atIndex:
invoke
invokeWithTarget:
initWithItem:typeIdentifier:
registerItemForTypeIdentifier:loadHandler:
hasItemConformingToTypeIdentifier:
loadItemForTypeIdentifier:options:completionHandler:
loadPreviewImageWithOptions:completionHandler:
initForWritingWithMutableData:
finishEncoding
setClassName:forClass:
classNameForClass:
initForReadingWithData:
finishDecoding
setClass:forClassName:
classForClassName:
archiver:willEncodeObject:
archiver:didEncodeObject:
archiver:willReplaceObject:withObject:
archiverWillFinish:
archiverDidFinish:
unarchiver:cannotDecodeObjectOfClassName:originalClasses:
unarchiver:
unarchiver:willReplaceObject:withObject:
unarchiverWillFinish:
unarchiverDidFinish:
replacementObjectForKeyedArchiver:
mutableArrayValueForKey:
mutableOrderedSetValueForKey:
mutableSetValueForKey:
valueForKeyPath:
setValue:forKeyPath:
validateValue:forKeyPath:error:
mutableArrayValueForKeyPath:
mutableOrderedSetValueForKeyPath:
mutableSetValueForKeyPath:
valueForUndefinedKey:
setValue:forUndefinedKey:
setNilValueForKey:
setValuesForKeysWithDictionary:
storedValueForKey:
takeStoredValue:forKey:
takeValue:forKey:
takeValue:forKeyPath:
handleQueryWithUnboundKey:
handleTakeValue:forUnboundKey:
unableToSetNilForKey:
valuesForKeys:
takeValuesFromDictionary:
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:context:
removeObserver:forKeyPath:
addObserver:toObjectsAtIndexes:forKeyPath:options:context:
removeObserver:fromObjectsAtIndexes:forKeyPath:context:
removeObserver:fromObjectsAtIndexes:forKeyPath:
willChange:valuesAtIndexes:forKey:
didChange:valuesAtIndexes:forKey:
stringFromMeters:
unitStringFromMeters:usedUnit:
initWithTagSchemes:options:
setOrthography:range:
orthographyAtIndex:effectiveRange:
stringEditedInRange:changeInLength:
enumerateTagsInRange:scheme:options:usingBlock:
sentenceRangeForRange:
tagAtIndex:scheme:tokenRange:sentenceRange:
enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:
displayNameForKey:value:
initWithLocaleIdentifier:
lockBeforeDate:
initWithCondition:
lockWhenCondition:
tryLockWhenCondition:
unlockWithCondition:
lockWhenCondition:beforeDate:
wait
waitUntilDate:
signal
broadcast
initWithKeyOptions:valueOptions:capacity:
initWithKeyPointerFunctions:valuePointerFunctions:capacity:
stringFromKilograms:
unitStringFromKilograms:usedUnit:
startQuery
stopQuery
disableUpdates
enableUpdates
resultAtIndex:
enumerateResultsUsingBlock:
enumerateResultsWithOptions:usingBlock:
indexOfResult:
valueOfAttribute:forResultAtIndex:
metadataQuery:replacementObjectForResultObject:
metadataQuery:replacementValueForAttribute:value:
valueForAttribute:
getArgumentTypeAtIndex:
isOneway
initWithDomain:type:name:port:
initWithDomain:type:name:
scheduleInRunLoop:forMode:
removeFromRunLoop:forMode:
publish
publishWithOptions:
resolve
resolveWithTimeout:
getInputStream:outputStream:
setTXTRecordData:
TXTRecordData
startMonitoring
stopMonitoring
searchForBrowsableDomains
searchForRegistrationDomains
searchForServicesOfType:inDomain:
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
netServiceBrowserWillSearch:
netServiceBrowserDidStopSearch:
netServiceBrowser:didNotSearch:
netServiceBrowser:didFindDomain:moreComing:
netServiceBrowser:didFindService:moreComing:
netServiceBrowser:didRemoveDomain:moreComing:
netServiceBrowser:didRemoveService:moreComing:
initWithName:object:userInfo:
addObserver:selector:name:object:
postNotification:
postNotificationName:object:
postNotificationName:object:userInfo:
removeObserver:
removeObserver:name:object:
initWithNotificationCenter:
enqueueNotification:postingStyle:
enqueueNotification:postingStyle:coalesceMask:forModes:
dequeueNotificationsMatching:coalesceMask:
stringFromNumber:
numberFromString:
:
copyWithZone:
mutableCopyWithZone:
encodeWithCoder:
replacementObjectForCoder:
awakeAfterUsingCoder:
beginContentAccess
endContentAccess
discardContentIfPossible
isContentDiscarded
start
main
addDependency:
removeDependency:
waitUntilFinished
addExecutionBlock:
initWithTarget:selector:object:
initWithInvocation:
addOperations:waitUntilFinished:
addOperationWithBlock:
cancelAllOperations
waitUntilAllOperationsAreFinished
isEqualToOrderedSet:
intersectsOrderedSet:
intersectsSet:
isSubsetOfOrderedSet:
isSubsetOfSet:
initWithObject:
initWithOrderedSet:
initWithOrderedSet:copyItems:
initWithOrderedSet:range:copyItems:
initWithArray:range:copyItems:
initWithSet:
initWithSet:copyItems:
addObjects:count:
moveObjectsAtIndexes:toIndex:
setObject:atIndex:
replaceObjectsInRange:withObjects:count:
intersectOrderedSet:
minusOrderedSet:
unionOrderedSet:
intersectSet:
minusSet:
unionSet:
sortRange:options:usingComparator:
initWithDominantScript:languageMap:
dominantLanguageForScript:
stringByAppendingPathComponent:
stringByAppendingPathExtension:
completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:
getFileSystemRepresentation:maxLength:
stringFromPersonNameComponents:
annotatedStringFromPersonNameComponents:
initWithOptions:
initWithPointerFunctions:
pointerAtIndex:
addPointer:
removePointerAtIndex:
insertPointer:atIndex:
replacePointerAtIndex:withPointer:
compact
invalidate
setDelegate:
sendBeforeDate:components:from:reserved:
sendBeforeDate:msgid:components:from:reserved:
addConnection:toRunLoop:forMode:
removeConnection:fromRunLoop:forMode:
handlePortMessage:
initWithMachPort:
initWithMachPort:options:
handleMachMessage:
initWithTCPPort:
initWithProtocolFamily:socketType:protocol:address:
initWithProtocolFamily:socketType:protocol:socket:
initRemoteWithTCPPort:host:
initRemoteWithProtocolFamily:socketType:protocol:address:
predicateWithSubstitutionVariables:
evaluateWithObject:
evaluateWithObject:substitutionVariables:
filterUsingPredicate:
operatingSystem
operatingSystemName
isOperatingSystemAtLeastVersion:
disableSuddenTermination
enableSuddenTermination
disableAutomaticTermination:
enableAutomaticTermination:
endActivity:
performActivityWithOptions:reason:usingBlock:
performExpiringActivityWithReason:usingBlock:
initWithParent:userInfo:
becomeCurrentWithPendingUnitCount:
resignCurrent
addChild:withPendingUnitCount:
setUserInfoObject:forKey:
resume
unpublish
forwardInvocation:
methodSignatureForSelector:
dealloc
finalize
allowsWeakReference
retainWeakReference
initWithPattern:options:error:
enumerateMatchesInString:options:range:usingBlock:
numberOfMatchesInString:options:range:
firstMatchInString:options:range:
rangeOfFirstMatchInString:options:range:
stringByReplacingMatchesInString:options:range:withTemplate:
replaceMatchesInString:options:range:withTemplate:
replacementStringForResult:inString:offset:template:
initWithTypes:error:
getCFRunLoop CF_RETURNS_NOT_RETAINED
addTimer:forMode:
addPort:forMode:
removePort:forMode:
limitDateForMode:
acceptInputForMode:beforeDate:
run
runUntilDate:
runMode:beforeDate:
configureAsServer
performSelector:withObject:afterDelay:inModes:
performSelector:withObject:afterDelay:
performSelector:target:argument:order:modes:
cancelPerformSelector:target:argument:
cancelPerformSelectorsWithTarget:
scanInt:
scanInteger:
scanLongLong:
scanUnsignedLongLong:
scanFloat:
scanDouble:
scanHexInt:
scanHexLongLong:
scanHexFloat:
scanHexDouble:
scanString:intoString:
scanCharactersFromSet:intoString:
scanUpToString:intoString:
scanUpToCharactersFromSet:intoString:
anyObject
isEqualToSet:
setSet:
countForObject:
initWithKey:ascending:
initWithKey:ascending:selector:
initWithKey:ascending:comparator:
compareObject:toObject:
sortUsingDescriptors:
open
close
propertyForKey:
setProperty:forKey:
read:maxLength:
getBuffer:length:
write:maxLength:
initToMemory
initToBuffer:capacity:
initWithURL:append:
initWithFileAtPath:
initToFileAtPath:append:
stream:handleEvent:
characterAtIndex:
substringFromIndex:
substringToIndex:
substringWithRange:
getCharacters:range:
compare:options:
compare:options:range:
compare:options:range:locale:
caseInsensitiveCompare:
localizedCompare:
localizedCaseInsensitiveCompare:
localizedStandardCompare:
isEqualToString:
hasPrefix:
hasSuffix:
commonPrefixWithString:options:
containsString:
localizedCaseInsensitiveContainsString:
localizedStandardContainsString:
localizedStandardRangeOfString:
rangeOfString:
rangeOfString:options:
rangeOfString:options:range:
rangeOfString:options:range:locale:
rangeOfCharacterFromSet:
rangeOfCharacterFromSet:options:
rangeOfCharacterFromSet:options:range:
rangeOfComposedCharacterSequenceAtIndex:
rangeOfComposedCharacterSequencesForRange:
stringByAppendingString:
stringByAppendingFormat:
uppercaseStringWithLocale:
lowercaseStringWithLocale:
capitalizedStringWithLocale:
getLineStart:end:contentsEnd:forRange:
lineRangeForRange:
getParagraphStart:end:contentsEnd:forRange:
paragraphRangeForRange:
enumerateSubstringsInRange:options:usingBlock:
enumerateLinesUsingBlock:
dataUsingEncoding:allowLossyConversion:
dataUsingEncoding:
canBeConvertedToEncoding:
cStringUsingEncoding:
getCString:maxLength:encoding:
getBytes:maxLength:usedLength:encoding:options:range:remainingRange:
maximumLengthOfBytesUsingEncoding:
lengthOfBytesUsingEncoding:
stringByTrimmingCharactersInSet:
stringByPaddingToLength:withString:startingAtIndex:
stringByFoldingWithOptions:locale:
stringByReplacingOccurrencesOfString:withString:options:range:
stringByReplacingOccurrencesOfString:withString:
stringByReplacingCharactersInRange:withString:
stringByApplyingTransform:reverse:
writeToURL:atomically:encoding:error:
writeToFile:atomically:encoding:error:
initWithCharactersNoCopy:length:freeWhenDone:
initWithCharacters:length:
initWithUTF8String:
initWithFormat:
initWithFormat:arguments:
initWithFormat:locale:
initWithFormat:locale:arguments:
initWithData:encoding:
initWithBytes:length:encoding:
initWithBytesNoCopy:length:encoding:freeWhenDone:
initWithCString:encoding:
initWithContentsOfURL:encoding:error:
initWithContentsOfFile:encoding:error:
initWithContentsOfURL:usedEncoding:error:
initWithContentsOfFile:usedEncoding:error:
insertString:atIndex:
appendString:
appendFormat:
setString:
replaceOccurrencesOfString:withString:options:range:
applyTransform:reverse:range:updatedRange:
propertyListFromStringsFileFormat
cString
lossyCString
cStringLength
getCString:
getCString:maxLength:
getCString:maxLength:range:remainingRange:
initWithCStringNoCopy:length:freeWhenDone:
initWithCString:length:
initWithCString:
getCharacters:
rangeAtIndex:
resultByAdjustingRangesWithOffset:
performSelectorOnMainThread:withObject:waitUntilDone:modes:
performSelectorOnMainThread:withObject:waitUntilDone:
performSelector:onThread:withObject:waitUntilDone:modes:
performSelector:onThread:withObject:waitUntilDone:
performSelectorInBackground:withObject:
initWithFireDate:interval:target:selector:userInfo:repeats:
fire
secondsFromGMTForDate:
abbreviationForDate:
isDaylightSavingTimeForDate:
daylightSavingTimeOffsetForDate:
nextDaylightSavingTimeTransitionAfterDate:
isEqualToTimeZone:
localizedName:locale:
initWithName:data:
stringForKey:
arrayForKey:
dataForKey:
longLongForKey:
doubleForKey:
boolForKey:
setString:forKey:
setData:forKey:
setArray:forKey:
setDictionary:forKey:
setLongLong:forKey:
setDouble:forKey:
setBool:forKey:
synchronize
beginUndoGrouping
endUndoGrouping
disableUndoRegistration
enableUndoRegistration
undoNestedGroup
removeAllActions
removeAllActionsWithTarget:
registerUndoWithTarget:selector:object:
prepareWithInvocationTarget:
registerUndoWithTarget:handler:
setActionIsDiscardable:
setActionName:
undoMenuTitleForUndoActionName:
redoMenuTitleForUndoActionName:
initWithScheme:host:path:
initFileURLWithPath:isDirectory:relativeToURL:
initFileURLWithPath:relativeToURL:
initFileURLWithPath:isDirectory:
initFileURLWithPath:
initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:
initWithString:relativeToURL:
initWithDataRepresentation:relativeToURL:
initAbsoluteURLWithDataRepresentation:relativeToURL:
checkResourceIsReachableAndReturnError:
isFileReferenceURL
fileReferenceURL
getResourceValue:forKey:error:
setResourceValue:forKey:error:
setResourceValues:error:
removeCachedResourceValueForKey:
removeAllCachedResourceValues
setTemporaryResourceValue:forKey:
bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:
initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:
startAccessingSecurityScopedResource
stopAccessingSecurityScopedResource
getPromisedItemResourceValue:forKey:error:
checkPromisedItemIsReachableAndReturnError:
initWithName:value:
initWithURL:resolvingAgainstBaseURL:
URLRelativeToURL:
stringByAddingPercentEncodingWithAllowedCharacters:
stringByAddingPercentEscapesUsingEncoding:
stringByReplacingPercentEscapesUsingEncoding:
URLByAppendingPathComponent:
URLByAppendingPathComponent:isDirectory:
URLByAppendingPathExtension:
URL:resourceDataDidBecomeAvailable:
URLResourceDidFinishLoading:
URLResourceDidCancelLoading:
URL:resourceDidFailLoadingWithReason:
resourceDataUsingCache:
loadResourceDataNotifyingClient:usingCache:
setResourceData:
URLHandleUsingCache:
useCredential:forAuthenticationChallenge:
continueWithoutCredentialForAuthenticationChallenge:
cancelAuthenticationChallenge:
performDefaultHandlingForAuthenticationChallenge:
rejectProtectionSpaceAndContinueWithChallenge:
initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:
initWithAuthenticationChallenge:sender:
initWithResponse:data:
initWithResponse:data:userInfo:storagePolicy:
initWithMemoryCapacity:diskCapacity:diskPath:
cachedResponseForRequest:
storeCachedResponse:forRequest:
removeCachedResponseForRequest:
removeAllCachedResponses
removeCachedResponsesSinceDate:
storeCachedResponse:forDataTask:
getCachedResponseForDataTask:completionHandler:
removeCachedResponseForDataTask:
initWithRequest:delegate:startImmediately:
initWithRequest:delegate:
unscheduleFromRunLoop:forMode:
setDelegateQueue:
connection:didFailWithError:
connectionShouldUseCredentialStorage:
connection:willSendRequestForAuthenticationChallenge:
connection:canAuthenticateAgainstProtectionSpace:
connection:didReceiveAuthenticationChallenge:
connection:didCancelAuthenticationChallenge:
connection:willSendRequest:redirectResponse:
connection:didReceiveResponse:
connection:didReceiveData:
connection:needNewBodyStream:
connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:
connection:willCacheResponse:
connectionDidFinishLoading:
connection:didWriteData:totalBytesWritten:expectedTotalBytes:
connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:
connectionDidFinishDownloading:destinationURL:
initWithUser:password:persistence:
initWithIdentity:certificates:persistence:
initWithTrust:
setCredential:forProtectionSpace:
removeCredential:forProtectionSpace:
removeCredential:forProtectionSpace:options:
defaultCredentialForProtectionSpace:
setDefaultCredential:forProtectionSpace:
getCredentialsForProtectionSpace:task:completionHandler:
setCredential:forProtectionSpace:task:
removeCredential:forProtectionSpace:options:task:
getDefaultCredentialForProtectionSpace:task:completionHandler:
setDefaultCredential:forProtectionSpace:task:
initWithHost:port:protocol:realm:authenticationMethod:
initWithProxyHost:port:type:realm:authenticationMethod:
URLProtocol:wasRedirectedToRequest:redirectResponse:
URLProtocol:cachedResponseIsValid:
URLProtocol:didReceiveResponse:cacheStoragePolicy:
URLProtocol:didLoadData:
URLProtocolDidFinishLoading:
URLProtocol:didFailWithError:
URLProtocol:didReceiveAuthenticationChallenge:
URLProtocol:didCancelAuthenticationChallenge:
initWithRequest:cachedResponse:client:
startLoading
stopLoading
initWithTask:cachedResponse:client:
initWithURL:cachePolicy:timeoutInterval:
valueForHTTPHeaderField:
setValue:forHTTPHeaderField:
addValue:forHTTPHeaderField:
initWithURL:MIMEType:expectedContentLength:textEncodingName:
initWithURL:statusCode:HTTPVersion:headerFields:
finishTasksAndInvalidate
invalidateAndCancel
resetWithCompletionHandler:
flushWithCompletionHandler:
getTasksWithCompletionHandler:
getAllTasksWithCompletionHandler:
streamTaskWithHostName:port:
streamTaskWithNetService:
suspend
cancelByProducingResumeData:
readDataOfMinLength:maxLength:timeout:completionHandler:
writeData:timeout:completionHandler:
captureStreams
closeWrite
closeRead
startSecureConnection
stopSecureConnection
URLSession:didBecomeInvalidWithError:
URLSession:didReceiveChallenge:completionHandler:
URLSessionDidFinishEventsForBackgroundURLSession:
URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:
URLSession:task:didReceiveChallenge:completionHandler:
URLSession:task:needNewBodyStream:
URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:
URLSession:task:didCompleteWithError:
URLSession:dataTask:didReceiveResponse:completionHandler:
URLSession:dataTask:didBecomeDownloadTask:
URLSession:dataTask:didBecomeStreamTask:
URLSession:dataTask:didReceiveData:
URLSession:dataTask:willCacheResponse:completionHandler:
URLSession:downloadTask:didFinishDownloadingToURL:
URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:
URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:
URLSession:readClosedForStreamTask:
URLSession:writeClosedForStreamTask:
URLSession:betterRouteDiscoveredForStreamTask:
URLSession:streamTask:didBecomeInputStream:outputStream:
initWithActivityType:
addUserInfoEntriesFromDictionary:
becomeCurrent
getContinuationStreamsWithCompletionHandler:
userActivityWillSave:
userActivityWasContinued:
userActivity:didReceiveInputStream:outputStream:
initWithSuiteName:
initWithUser:
integerForKey:
floatForKey:
URLForKey:
setInteger:forKey:
setFloat:forKey:
setURL:forKey:
registerDefaults:
addSuiteNamed:
removeSuiteNamed:
setVolatileDomain:forName:
removeVolatileDomainForName:
persistentDomainNames
setPersistentDomain:forName:
removePersistentDomainForName:
objectIsForcedForKey:
objectIsForcedForKey:inDomain:
initWithUUIDString:
initWithUUIDBytes:
getUUIDBytes:
getValue:
initWithBytes:objCType:
isEqualToValue:
initWithChar:
initWithUnsignedChar:
initWithShort:
initWithUnsignedShort:
initWithInt:
initWithUnsignedInt:
initWithLong:
initWithUnsignedLong:
initWithLongLong:
initWithUnsignedLongLong:
initWithFloat:
initWithDouble:
initWithBool:
initWithInteger:
initWithUnsignedInteger:
isEqualToNumber:
transformedValue:
reverseTransformedValue:
initWithStream:
parse
abortParsing
parserDidStartDocument:
parserDidEndDocument:
parser:foundNotationDeclarationWithName:publicID:systemID:
parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:
parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:
parser:foundElementDeclarationWithName:model:
parser:foundInternalEntityDeclarationWithName:value:
parser:foundExternalEntityDeclarationWithName:publicID:systemID:
parser:didStartElement:namespaceURI:qualifiedName:attributes:
parser:didEndElement:namespaceURI:qualifiedName:
parser:didStartMappingPrefix:toURI:
parser:didEndMappingPrefix:
parser:foundCharacters:
parser:foundIgnorableWhitespace:
parser:foundProcessingInstructionWithTarget:data:
parser:foundComment:
parser:foundCDATA:
parser:resolveExternalEntityName:systemID:
parser:parseErrorOccurred:
parser:validationErrorOccurred:
saveSnapshot
initWithSnapshotData:
initWithController:snapshotData:
initWithIdentifier:
initWithIdentifier:player:
reportAchievementWithCompletionHandler:
initWithIdentifier:forPlayer:
loadImageWithCompletionHandler:
achievementViewControllerDidFinish:
decline
challengeComposeControllerWithMessage:players:completionHandler:
issueChallengeToPlayers:message:
selectChallengeablePlayers:withCompletionHandler:
challengeComposeControllerWithPlayers:message:completionHandler:
selectChallengeablePlayerIDs:withCompletionHandler:
localPlayerDidSelectChallenge:
shouldShowBannerForLocallyReceivedChallenge:
localPlayerDidReceiveChallenge:
shouldShowBannerForLocallyCompletedChallenge:
localPlayerDidCompleteChallenge:
shouldShowBannerForRemotelyCompletedChallenge:
remotePlayerDidCompleteChallenge:
player:wantsToPlayChallenge:
player:didReceiveChallenge:
player:didCompleteChallenge:issuedByFriend:
player:issuedChallengeWasCompleted:byFriend:
setMessage:
addRecipientPlayers:
addRecipientsWithPlayerIDs:
addRecipientsWithEmailAddresses:
friendRequestComposeViewControllerDidFinish:
gameCenterViewControllerDidFinish:
initWithPlayers:
loadScoresWithCompletionHandler:
initWithPlayerIDs:
loadLeaderboardsWithCompletionHandler:
leaderboardViewControllerDidFinish:
loadFriendPlayersWithCompletionHandler:
setDefaultLeaderboardIdentifier:completionHandler:
loadDefaultLeaderboardIdentifierWithCompletionHandler:
generateIdentityVerificationSignatureWithCompletionHandler:
registerListener:
unregisterListener:
unregisterAllListeners
setDefaultLeaderboardCategoryID:completionHandler:
loadDefaultLeaderboardCategoryIDWithCompletionHandler:
loadFriendsWithCompletionHandler:
authenticateWithCompletionHandler:
sendData:toPlayers:dataMode:error:
sendDataToAllPlayers:withDataMode:error:
disconnect
voiceChatWithName:
chooseBestHostingPlayerWithCompletionHandler:
rematchWithCompletionHandler:
match:didReceiveData:fromRemotePlayer:
match:didReceiveData:forRecipient:fromRemotePlayer:
match:didReceiveData:fromPlayer:
match:player:didChangeConnectionState:
match:player:didChangeState:
match:didFailWithError:
match:shouldReinviteDisconnectedPlayer:
match:shouldReinvitePlayer:
chooseBestHostPlayerWithCompletionHandler:
sendData:toPlayers:withDataMode:error:
player:didAcceptInvite:
player:didRequestMatchWithRecipients:
player:didRequestMatchWithPlayers:
matchForInvite:completionHandler:
findMatchForRequest:withCompletionHandler:
findPlayersForHostedRequest:withCompletionHandler:
addPlayersToMatch:matchRequest:completionHandler:
cancelPendingInviteToPlayer:
finishMatchmakingForMatch:
queryPlayerGroupActivity:withCompletionHandler:
queryActivityWithCompletionHandler:
startBrowsingForNearbyPlayersWithHandler:
stopBrowsingForNearbyPlayers
startBrowsingForNearbyPlayersWithReachableHandler:
cancelInviteToPlayer:
findPlayersForHostedMatchRequest:withCompletionHandler:
initWithMatchRequest:
initWithInvite:
addPlayersToMatch:
setHostedPlayer:connected:
setHostedPlayer:didConnect:
setHostedPlayerReady:
matchmakerViewControllerWasCancelled:
matchmakerViewController:didFailWithError:
matchmakerViewController:didFindMatch:
matchmakerViewController:didFindHostedPlayers:
matchmakerViewController:didFindPlayers:
matchmakerViewController:hostedPlayerDidAccept:
matchmakerViewController:didReceiveAcceptFromHostedPlayer:
peerPickerController:didSelectConnectionType:
peerPickerController:sessionForConnectionType:
peerPickerController:didConnectPeer:toSession:
peerPickerControllerDidCancel:
show
dismiss
loadPhotoForSize:withCompletionHandler:
session:peer:didChangeState:
session:didReceiveConnectionRequestFromPeer:
session:connectionWithPeerFailed:withError:
session:didFailWithError:
voiceChatService:sendData:toParticipantID:
participantID
voiceChatService:sendRealTimeData:toParticipantID:
voiceChatService:didStartWithParticipantID:
voiceChatService:didNotStartWithParticipantID:error:
voiceChatService:didStopWithParticipantID:error:
voiceChatService:didReceiveInvitationFromParticipantID:callID:
loadDataWithCompletionHandler:
fetchSavedGamesWithCompletionHandler:
saveGameData:withName:completionHandler:
deleteSavedGamesWithName:completionHandler:
resolveConflictingSavedGames:withData:completionHandler:
player:didModifySavedGame:
player:hasConflictingSavedGames:
initWithLeaderboardIdentifier:
initWithLeaderboardIdentifier:player:
initWithLeaderboardIdentifier:forPlayer:
reportScoreWithCompletionHandler:
initWithCategory:
initWithSessionID:displayName:sessionMode:
displayNameForPeer:
sendData:toPeers:withDataMode:error:
sendDataToAllPeers:withDataMode:error:
setDataReceiveHandler:withContext:
connectToPeer:withTimeout:
cancelConnectToPeer:
acceptConnectionFromPeer:error:
denyConnectionFromPeer:
disconnectPeerFromAllPeers:
disconnectFromAllPeers
peersWithConnectionState:
player:didRequestMatchWithOtherPlayers:
player:receivedTurnEventForMatch:didBecomeActive:
player:matchEnded:
player:receivedExchangeRequest:forMatch:
player:receivedExchangeCancellation:forMatch:
player:receivedExchangeReplies:forCompletedExchange:forMatch:
player:wantsToQuitMatch:
setLocalizableMessageWithKey:arguments:
acceptInviteWithCompletionHandler:
declineInviteWithCompletionHandler:
removeWithCompletionHandler:
loadMatchDataWithCompletionHandler:
endTurnWithNextParticipants:turnTimeout:matchData:completionHandler:
participantQuitInTurnWithOutcome:nextParticipants:turnTimeout:matchData:completionHandler:
participantQuitOutOfTurnWithOutcome:withCompletionHandler:
endMatchInTurnWithMatchData:completionHandler:
endMatchInTurnWithMatchData:scores:achievements:completionHandler:
saveCurrentTurnWithMatchData:completionHandler:
saveMergedMatchData:withResolvedExchanges:completionHandler:
sendExchangeToParticipants:data:localizableMessageKey:arguments:timeout:completionHandler:
sendReminderToParticipants:localizableMessageKey:arguments:completionHandler:
endTurnWithNextParticipant:matchData:completionHandler:
participantQuitInTurnWithOutcome:nextParticipant:matchData:completionHandler:
cancelWithLocalizableMessageKey:arguments:completionHandler:
replyWithLocalizableMessageKey:arguments:data:completionHandler:
handleInviteFromGameCenter:
handleTurnEventForMatch:didBecomeActive:
handleTurnEventForMatch:
handleMatchEnded:
turnBasedMatchmakerViewControllerWasCancelled:
turnBasedMatchmakerViewController:didFailWithError:
turnBasedMatchmakerViewController:didFindMatch:
turnBasedMatchmakerViewController:playerQuitForMatch:
setPlayer:muted:
setMute:forPlayer:
startVoiceChatWithParticipantID:error:
stopVoiceChatWithParticipantID:
acceptCallID:error:
denyCallID:
receivedRealTimeData:fromParticipantID:
receivedData:fromParticipantID:
agentWillUpdate:
agentDidUpdate:
updateWithDeltaTime:
setWeight:forGoal:
weightForGoal:
removeGoal:
removeAllGoals
initWithComponentClass:
addComponent:
addComponentWithEntity:
removeComponentWithEntity:
removeComponent:
removeComponentForClass:
componentForClass:
setGameModel:
applyGameModelUpdate:
scoreForPlayer:
isWinForPlayer:
isLossForPlayer:
unapplyGameModelUpdate:
initWithNodes:
connectNodeToLowestCostNode:bidirectional:
removeNodes:
addNodes:
initWithObstacles:bufferRadius:
connectNodeUsingObstacles:
connectNodeUsingObstacles:ignoringObstacles:
connectNodeUsingObstacles:ignoringBufferRadiusOfObstacles:
addObstacles:
removeObstacles:
removeAllObstacles
lockConnectionFromNode:toNode:
unlockConnectionFromNode:toNode:
isConnectionLockedFromNode:toNode:
initFromGridStartingAt:width:height:diagonalsAllowed:
nodeAtGridPosition:
connectNodeToAdjacentNodes:
addConnectionsToNodes:bidirectional:
removeConnectionsToNodes:bidirectional:
estimatedCostToNode:
costToNode:
initWithPoint:
initWithGridPosition:
initWithRadius:
initWithPoints:count:
vertexAtIndex:
initWithPoints:count:radius:cyclical:
initWithGraphNodes:radius:
pointAtIndex:
initWithRandomSource:lowestValue:highestValue:
nextInt
nextIntWithUpperBound:
nextUniform
nextBool
initWithRandomSource:mean:deviation:
arrayByShufflingObjectsInArray:
initWithSeed:
dropValuesWithCount:
evaluate
addRule:
addRulesFromArray:
removeAllRules
gradeForFact:
minimumGradeForFacts:
maximumGradeForFacts:
assertFact:
assertFact:grade:
retractFact:
retractFact:grade:
evaluatePredicateWithSystem:
performActionWithSystem:
initWithPredicate:
isValidNextState:
didEnterWithPreviousState:
willExitWithNextState:
initWithStates:
stateForClass:
canEnterState:
enterState:
prepareToDraw
initWithMesh:error:
draw
initWithSharegroup:
initWithShareContext:
textureWithContentsOfFile:options:queue:completionHandler:
textureWithContentsOfURL:options:queue:completionHandler:
textureWithContentsOfData:options:queue:completionHandler:
textureWithCGImage:options:queue:completionHandler:
cubeMapWithContentsOfFiles:options:queue:completionHandler:
cubeMapWithContentsOfFile:options:queue:completionHandler:
cubeMapWithContentsOfURL:options:queue:completionHandler:
initWithFrame:context:
bindDrawable
deleteDrawable
display
glkView:drawInRect:
glkViewControllerUpdate:
glkViewController:willPause:
dateComponentsForCalendar:
initWithPredicate:resultsHandler:
initWithType:predicate:anchor:limit:completionHandler:
initWithType:predicate:anchor:limit:resultsHandler:
initWithType:predicate:samplePredicates:completion:
initWithName:manufacturer:model:hardwareVersion:firmwareVersion:softwareVersion:localIdentifier:UDIDeviceIdentifier:
authorizationStatusForType:
requestAuthorizationToShareTypes:readTypes:completion:
handleAuthorizationForExtensionWithCompletion:
earliestPermittedSampleDate
saveObject:withCompletion:
saveObjects:withCompletion:
deleteObject:withCompletion:
deleteObjects:withCompletion:
deleteObjectsOfType:predicate:withCompletion:
executeQuery:
stopQuery:
splitTotalEnergy:startDate:endDate:resultsHandler:
dateOfBirthWithError:
biologicalSexWithError:
bloodTypeWithError:
fitzpatrickSkinTypeWithError:
addSamples:toWorkout:completion:
startWorkoutSession:
endWorkoutSession:
enableBackgroundDeliveryForType:frequency:withCompletion:
disableBackgroundDeliveryForType:withCompletion:
disableAllBackgroundDeliveryWithCompletion:
preferredUnitsForQuantityTypes:completion:
isCompatibleWithUnit:
initWithSampleType:predicate:updateHandler:
doubleValueForUnit:
initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:
initWithSampleType:samplePredicate:completionHandler:
initWithSource:version:
averageQuantityForSource:
averageQuantity
minimumQuantityForSource:
minimumQuantity
maximumQuantityForSource:
maximumQuantity
sumQuantityForSource:
sumQuantity
statisticsForDate:
enumerateStatisticsFromDate:toDate:withBlock:
initWithQuantityType:quantitySamplePredicate:options:anchorDate:intervalComponents:
initWithQuantityType:quantitySamplePredicate:options:completionHandler:
isNull
unitMultipliedByUnit:
unitDividedByUnit:
unitRaisedToPower:
reciprocalUnit
initWithActivityType:locationType:
workoutSession:didChangeToState:fromState:date:
workoutSession:didFailWithError:
setActivitySummary:animated:
updateName:completionHandler:
identifyWithCompletionHandler:
accessoryDidUpdateName:
accessory:didUpdateNameForService:
accessory:didUpdateAssociatedServiceTypeForService:
accessoryDidUpdateServices:
accessoryDidUpdateReachability:
accessory:service:didUpdateValueForCharacteristic:
startSearchingForNewAccessories
stopSearchingForNewAccessories
accessoryBrowser:didFindNewAccessory:
accessoryBrowser:didRemoveNewAccessory:
addAction:completionHandler:
removeAction:completionHandler:
writeValue:completionHandler:
readValueWithCompletionHandler:
enableNotification:completionHandler:
updateAuthorizationData:completionHandler:
initWithCharacteristic:triggerValue:
updateTriggerValue:completionHandler:
initWithCharacteristic:targetValue:
updateTargetValue:completionHandler:
initWithName:events:predicate:
addEvent:completionHandler:
removeEvent:completionHandler:
updatePredicate:completionHandler:
addAccessory:completionHandler:
removeAccessory:completionHandler:
assignAccessory:toRoom:completionHandler:
unblockAccessory:completionHandler:
manageUsersWithCompletionHandler:
addUserWithCompletionHandler:
removeUser:completionHandler:
homeAccessControlForUser:
addRoomWithName:completionHandler:
removeRoom:completionHandler:
roomForEntireHome
addZoneWithName:completionHandler:
removeZone:completionHandler:
addServiceGroupWithName:completionHandler:
removeServiceGroup:completionHandler:
addActionSetWithName:completionHandler:
removeActionSet:completionHandler:
executeActionSet:completionHandler:
builtinActionSetOfType:
addTrigger:completionHandler:
removeTrigger:completionHandler:
homeDidUpdateName:
home:didAddAccessory:
home:didRemoveAccessory:
home:didAddUser:
home:didRemoveUser:
home:didUpdateRoom:forAccessory:
home:didAddRoom:
home:didRemoveRoom:
home:didUpdateNameForRoom:
home:didAddZone:
home:didRemoveZone:
home:didUpdateNameForZone:
home:didAddRoom:toZone:
home:didRemoveRoom:fromZone:
home:didAddServiceGroup:
home:didRemoveServiceGroup:
home:didUpdateNameForServiceGroup:
home:didAddService:toServiceGroup:
home:didRemoveService:fromServiceGroup:
home:didAddActionSet:
home:didRemoveActionSet:
home:didUpdateNameForActionSet:
home:didUpdateActionsForActionSet:
home:didAddTrigger:
home:didRemoveTrigger:
home:didUpdateNameForTrigger:
home:didUpdateTrigger:
home:didUnblockAccessory:
home:didEncounterError:forAccessory:
updatePrimaryHome:completionHandler:
addHomeWithName:completionHandler:
removeHome:completionHandler:
homeManagerDidUpdateHomes:
homeManagerDidUpdatePrimaryHome:
homeManager:didAddHome:
homeManager:didRemoveHome:
initWithRegion:
updateRegion:completionHandler:
updateAssociatedServiceType:completionHandler:
addService:completionHandler:
removeService:completionHandler:
initWithName:fireDate:timeZone:recurrence:recurrenceCalendar:
updateFireDate:completionHandler:
updateTimeZone:completionHandler:
updateRecurrence:completionHandler:
addActionSet:completionHandler:
enable:completionHandler:
addRoom:completionHandler:
initWithAdType:
cancelBannerViewAction
bannerViewWillLoadAd:
bannerViewDidLoadAd:
bannerView:didFailToReceiveAdWithError:
bannerViewActionShouldBegin:willLeaveApplication:
bannerViewActionDidFinish:
determineAppInstallationAttributionWithCompletionHandler:
lookupAdConversionDetails:
requestAttributionDetailsWithBlock:
addClientToSegments:replaceExisting:
cancelAction
presentInView:
presentFromViewController:
interstitialAdDidUnload:
interstitialAd:didFailWithError:
interstitialAdWillLoad:
interstitialAdDidLoad:
interstitialAdActionShouldBegin:willLeaveApplication:
interstitialAdActionDidFinish:
playPrerollAdWithCompletionHandler:
cancelPreroll
requestInterstitialAdPresentation
initWithVirtualMachine:
evaluateScript:
evaluateScript:withSourceURL:
initWithValue:
toObject
toObjectOfClass:
toBool
toDouble
toInt32
toUInt32
toNumber
toString
toDate
toArray
toDictionary
setValue:forProperty:
deleteProperty:
hasProperty:
defineProperty:descriptor:
setValue:atIndex:
isEqualToObject:
isEqualWithTypeCoercionToObject:
isInstanceOf:
callWithArguments:
constructWithArguments:
invokeMethod:withArguments:
toPoint
toRange
toRect
toSize
addManagedReference:withOwner:
removeManagedReference:withOwner:
canEvaluatePolicy:error:
evaluatePolicy:localizedReason:reply:
setCredential:type:
isCredentialSet:
evaluateAccessControl:operation:localizedReason:reply:
setCoordinate:
initWithAnnotation:reuseIdentifier:
prepareForReuse
setSelected:animated:
setDragState:animated:
initWithCircle:
initWithRequest:
calculateDirectionsWithCompletionHandler:
calculateETAWithCompletionHandler:
setSource:
setDestination:
stringFromDistance:
distanceFromString:
startWithCompletionHandler:
completerDidUpdateResults:
completer:didFailWithError:
initWithCompletion:
openInMapsWithLaunchOptions:
pointForCoordinate:
startWithQueue:completionHandler:
setRegion:animated:
setCenterCoordinate:animated:
regionThatFits:
setVisibleMapRect:animated:
mapRectThatFits:
setVisibleMapRect:edgePadding:animated:
mapRectThatFits:edgePadding:
setCamera:animated:
convertCoordinate:toPointToView:
convertPoint:toCoordinateFromView:
convertRegion:toRectToView:
convertRect:toRegionFromView:
setUserTrackingMode:animated:
addAnnotation:
addAnnotations:
removeAnnotation:
removeAnnotations:
viewForAnnotation:
dequeueReusableAnnotationViewWithIdentifier:
selectAnnotation:animated:
deselectAnnotation:animated:
showAnnotations:animated:
addOverlay:level:
addOverlays:level:
removeOverlay:
removeOverlays:
insertOverlay:atIndex:level:
insertOverlay:aboveOverlay:
insertOverlay:belowOverlay:
exchangeOverlay:withOverlay:
rendererForOverlay:
viewForOverlay:
addOverlay:
addOverlays:
insertOverlay:atIndex:
exchangeOverlayAtIndex:withOverlayAtIndex:
mapView:regionWillChangeAnimated:
mapView:regionDidChangeAnimated:
mapViewWillStartLoadingMap:
mapViewDidFinishLoadingMap:
mapViewDidFailLoadingMap:withError:
mapViewWillStartRenderingMap:
mapViewDidFinishRenderingMap:fullyRendered:
mapView:viewForAnnotation:
mapView:didAddAnnotationViews:
mapView:annotationView:calloutAccessoryControlTapped:
mapView:didSelectAnnotationView:
mapView:didDeselectAnnotationView:
mapViewWillStartLocatingUser:
mapViewDidStopLocatingUser:
mapView:didUpdateUserLocation:
mapView:didFailToLocateUserWithError:
mapView:annotationView:didChangeDragState:fromOldState:
mapView:didChangeUserTrackingMode:animated:
mapView:rendererForOverlay:
mapView:didAddOverlayRenderers:
mapView:viewForOverlay:
mapView:didAddOverlayViews:
points
getCoordinates:range:
intersectsMapRect:
canReplaceMapContent
createPath
invalidatePath
applyStrokePropertiesToContext:atZoomScale:
applyFillPropertiesToContext:atZoomScale:
strokePath:inContext:
fillPath:inContext:
initWithOverlay:
pointForMapPoint:
mapPointForPoint:
rectForMapRect:
mapRectForRect:
canDrawMapRect:zoomScale:
drawMapRect:zoomScale:inContext:
setNeedsDisplay
setNeedsDisplayInMapRect:
setNeedsDisplayInMapRect:zoomScale:
initWithCoordinate:addressDictionary:
initWithPolygon:
initWithPolyline:
initWithCoordinate:
reverseGeocoder:didFindPlacemark:
reverseGeocoder:didFailWithError:
initWithURLTemplate:
URLForTilePath:
loadTileAtPath:result:
initWithTileOverlay:
reloadData
initWithMapView:
makeNowPlayingInfoLanguageOption
makeNowPlayingInfoLanguageOptionGroup
enumerateValuesForProperties:usingBlock:
imageWithSize:
beginGeneratingLibraryChangeNotifications
endGeneratingLibraryChangeNotifications
addItemWithProductID:completionHandler:
getPlaylistWithUUID:creationMetadata:completionHandler:
initWithMediaTypes:
mediaPicker:didPickMediaItems:
mediaPickerDidCancel:
beginSeekingForward
beginSeekingBackward
endSeeking
addMediaItems:completionHandler:
initWithFilterPredicates:
addFilterPredicate:
removeFilterPredicate:
initWithContentURL:
setFullscreen:animated:
thumbnailImageAtTime:timeOption:
requestThumbnailImagesAtTimes:timeOption:
cancelAllThumbnailImageRequests
presentMoviePlayerViewControllerAnimated:
dismissMoviePlayerViewControllerAnimated
setQueueWithQuery:
setQueueWithItemCollection:
setQueueWithStoreIDs:
skipToNextItem
skipToBeginning
skipToPreviousItem
beginGeneratingPlaybackNotifications
endGeneratingPlaybackNotifications
initWithType:languageTag:characteristics:displayName:identifier:
isAutomaticLegibleLanguageOption
isAutomaticAudibleLanguageOption
initWithLanguageOptions:defaultLanguageOption:allowEmptySelection:
beginLoadingChildItemsAtIndexPath:completionHandler:
childItemsDisplayPlaybackProgressAtIndexPath:
numberOfChildItemsAtIndexPath:
contentItemAtIndexPath:
playableContentManager:initiatePlaybackOfContentItemAtIndexPath:completionHandler:
playableContentManager:initializePlaybackQueueWithCompletionHandler:
playableContentManager:didUpdateContext:
beginUpdates
endUpdates
addTarget:action:
removeTarget:action:
removeTarget:
addTargetWithHandler:
setMinimumVolumeSliderImage:forState:
setMaximumVolumeSliderImage:forState:
setVolumeThumbImage:forState:
minimumVolumeSliderImageForState:
maximumVolumeSliderImageForState:
volumeThumbImageForState:
volumeSliderRectForBounds:
volumeThumbRectForBounds:volumeSliderRect:value:
setRouteButtonImage:forState:
routeButtonImageForState:
routeButtonRectForBounds:
setSubject:
setToRecipients:
setCcRecipients:
setBccRecipients:
setMessageBody:isHTML:
addAttachmentData:mimeType:fileName:
mailComposeController:didFinishWithResult:error:
disableUserAttachments __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_7_0)
addAttachmentURL:withAlternateFilename:
addAttachmentData:typeIdentifier:filename:
messageComposeViewController:didFinishWithResult:
structType
arrayType
memberByName:
elementStructType
elementArrayType
synchronizeResource:
synchronizeTexture:slice:level:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
generateMipmapsForTexture:
fillBuffer:range:value:
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
contents
didModifyRange:
enqueue
commit
addScheduledHandler:
presentDrawable:
presentDrawable:atTime:
waitUntilScheduled
addCompletedHandler:
waitUntilCompleted
endEncoding
insertDebugSignpost:
pushDebugGroup:
popDebugGroup
insertDebugCaptureBoundary
setComputePipelineState:
setBytes:length:atIndex:
setBuffer:offset:atIndex:
setBufferOffset:atIndex:
setBuffers:offsets:withRange:
setTexture:atIndex:
setTextures:withRange:
setSamplerState:atIndex:
setSamplerStates:withRange:
setSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setThreadgroupMemoryLength:atIndex:
dispatchThreadgroups:threadsPerThreadgroup:
dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
newLibraryWithSource:options:completionHandler:
newRenderPipelineStateWithDescriptor:completionHandler:
newRenderPipelineStateWithDescriptor:options:completionHandler:
newComputePipelineStateWithFunction:completionHandler:
newComputePipelineStateWithFunction:options:completionHandler:
newComputePipelineStateWithDescriptor:options:completionHandler:
supportsFeatureSet:
supportsTextureSampleCount:
present
presentAtTime:
setRenderPipelineState:
setVertexBytes:length:atIndex:
setVertexBuffer:offset:atIndex:
setVertexBufferOffset:atIndex:
setVertexBuffers:offsets:withRange:
setVertexTexture:atIndex:
setVertexTextures:withRange:
setVertexSamplerState:atIndex:
setVertexSamplerStates:withRange:
setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setViewport:
setFrontFacingWinding:
setCullMode:
setDepthClipMode:
setDepthBias:slopeScale:clamp:
setScissorRect:
setTriangleFillMode:
setFragmentBytes:length:atIndex:
setFragmentBuffer:offset:atIndex:
setFragmentBufferOffset:atIndex:
setFragmentBuffers:offsets:withRange:
setFragmentTexture:atIndex:
setFragmentTextures:withRange:
setFragmentSamplerState:atIndex:
setFragmentSamplerStates:withRange:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setBlendColorRed:green:blue:alpha:
setDepthStencilState:
setStencilReferenceValue:
setStencilFrontReferenceValue:backReferenceValue:
setVisibilityResultMode:offset:
drawPrimitives:vertexStart:vertexCount:instanceCount:
drawPrimitives:vertexStart:vertexCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
drawPrimitives:indirectBuffer:indirectBufferOffset:
drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:
setPurgeableState:
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
initWithDevice:
initWithMesh:device:error:
newTextureWithContentsOfURL:options:completionHandler:
newTextureWithData:options:completionHandler:
newTextureWithCGImage:options:completionHandler:
initWithFrame:device:
releaseDrawables
mtkView:drawableSizeWillChange:
drawInMTKView:
initWithDevice:kernelWidth:kernelHeight:weights:
initWithDevice:kernelWidth:kernelHeight:
initWithDevice:sigma:
initWithDevice:linearGrayColorTransform:
initWithDevice:histogramInfo:
encodeToCommandBuffer:sourceTexture:histogram:histogramOffset:
histogramSizeForSourceFormat:
encodeTransformToCommandBuffer:sourceTexture:histogram:histogramOffset:
encodeTransformToCommandBuffer:sourceTexture:sourceHistogram:sourceHistogramOffset:desiredHistogram:desiredHistogramOffset:
encodeToCommandBuffer:inPlaceTexture:fallbackCopyAllocator:
encodeToCommandBuffer:sourceTexture:destinationTexture:
sourceRegionForDestinationSize:
encodeToCommandBuffer:primaryTexture:inPlaceSecondaryTexture:fallbackCopyAllocator:
encodeToCommandBuffer:inPlacePrimaryTexture:secondaryTexture:fallbackCopyAllocator:
encodeToCommandBuffer:primaryTexture:secondaryTexture:destinationTexture:
primarySourceRegionForDestinationSize:
secondarySourceRegionForDestinationSize:
initWithDevice:kernelDiameter:
initWithDevice:kernelWidth:kernelHeight:values:
initWithDevice:thresholdValue:maximumValue:linearGrayColorTransform:
initWithDevice:thresholdValue:linearGrayColorTransform:
copyWithZone:device:
initWithURL:vertexDescriptor:bufferAllocator:
initWithURL:vertexDescriptor:bufferAllocator:preserveTopology:error:
exportAssetToURL:
exportAssetToURL:error:
boundingBoxAtTime:
frameBoundingBox:setNearAndFar:
lookAt:
lookAt:from:
rayTo:forViewPort:
bokehKernelWithSize:
irradianceAtPoint:
irradianceAtPoint:colorSpace:
setColorByTemperature:
initWithIESProfile:
generateSphericalHarmonicsFromLight:
generateCubemapFromLight:
initWithReflectiveTexture:irradianceTexture:
generateSphericalHarmonicsFromIrradiance:
initWithName:semantic:
initWithName:semantic:float:
initWithName:semantic:float2:
initWithName:semantic:float3:
initWithName:semantic:float4:
initWithName:semantic:matrix4x4:
initWithName:semantic:URL:
initWithName:semantic:string:
initWithName:semantic:textureSampler:
initWithName:semantic:color:
setProperties:
initWithName:scatteringFunction:
setProperty:
removeProperty:
propertyNamed:
propertyWithSemantic:
removeAllProperties
initWithVertexBuffer:vertexCount:descriptor:submeshes:
initWithVertexBuffers:vertexCount:descriptor:submeshes:
vertexAttributeDataForAttributeNamed:
addAttributeWithName:format:
addNormalsWithAttributeNamed:creaseThreshold:
addTangentBasisForTextureCoordinateAttributeNamed:tangentAttributeNamed:bitangentAttributeNamed:
addTangentBasisForTextureCoordinateAttributeNamed:normalAttributeNamed:tangentAttributeNamed:
makeVerticesUnique
generateAmbientOcclusionTextureWithSize:raysPerSample:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateAmbientOcclusionTextureWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateAmbientOcclusionVertexColorsWithRaysPerSample:attenuationFactor:objectsToConsider:vertexAttributeNamed:
generateAmbientOcclusionVertexColorsWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:
generateLightMapTextureWithTextureSize:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateLightMapTextureWithQuality:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateLightMapVertexColorsWithLightsToConsider:objectsToConsider:vertexAttributeNamed:
initWithBytes:deallocator:
fillData:offset:
map
initWithType:length:
initWithType:data:
setComponent:forProtocol:
addChild:
initWithName:indexBuffer:indexCount:indexType:geometryType:material:
initWithIndexBuffer:indexCount:indexType:geometryType:material:
initWithName:indexBuffer:indexCount:indexType:geometryType:material:topology:
initWithMDLSubmesh:indexType:geometryType:
initWithData:topLeftOrigin:name:dimensions:rowStride:channelCount:channelEncoding:isCube:
writeToURL:
writeToURL:type:
imageFromTexture
texelDataWithTopLeftOrigin
texelDataWithBottomLeftOrigin
texelDataWithTopLeftOriginAtMipLevel:create:
texelDataWithBottomLeftOriginAtMipLevel:create:
initWithURL:name:
initWithDivisions:name:dimensions:channelCount:channelEncoding:color1:color2:
initWithName:channelEncoding:textureDimensions:turbidity:sunElevation:upperAtmosphereScattering:groundAlbedo:
updateTexture
initWithColorTemperatureGradientFrom:toColorTemperature:name:textureDimensions:
initWithColorGradientFrom:toColor:name:textureDimensions:
initVectorNoiseWithSmoothness:name:textureDimensions:channelEncoding:
initScalarNoiseWithSmoothness:name:textureDimensions:channelCount:channelEncoding:grayscale:
initByGeneratingNormalMapWithTexture:name:smoothness:contrast:
setLocalTransform:forTime:
setLocalTransform:
localTransformAtTime:
initWithIdentity
initWithTransformComponent:
initWithMatrix:
setIdentity
translationAtTime:
rotationAtTime:
shearAtTime:
scaleAtTime:
setTranslation:forTime:
setRotation:forTime:
setShear:forTime:
setScale:forTime:
rotationMatrixAtTime:
initWithName:format:offset:bufferIndex:
initWithVertexDescriptor:
attributeNamed:
addOrReplaceAttribute:
setPackedStrides
setPackedOffsets
initWithAsset:divisions:interiorShells:exteriorShells:patchRadius:
initWithAsset:divisions:interiorNBWidth:exteriorNBWidth:patchRadius:
initWithData:boundingBox:voxelExtent:
meshUsingAllocator:
voxelExistsAtIndex:allowAnyX:allowAnyY:allowAnyZ:allowAnyShell:
setVoxelAtIndex:
setVoxelsForMesh:divisions:interiorShells:exteriorShells:patchRadius:
setVoxelsForMesh:divisions:interiorNBWidth:exteriorNBWidth:patchRadius:
voxelsWithinExtent:
voxelIndices
unionWithVoxels:
differenceWithVoxels:
intersectWithVoxels:
indexOfSpatialLocation:
spatialLocationOfIndex:
voxelBoundingBoxAtIndex:
initWithServiceType:discoveryInfo:session:
advertiserAssistantWillPresentInvitation:
advertiserAssistantDidDismissInvitation:
initWithServiceType:session:
initWithBrowser:session:
browserViewControllerDidFinish:
browserViewControllerWasCancelled:
browserViewController:shouldPresentNearbyPeer:withDiscoveryInfo:
initWithPeer:discoveryInfo:serviceType:
startAdvertisingPeer
stopAdvertisingPeer
advertiser:didReceiveInvitationFromPeer:withContext:invitationHandler:
advertiser:didNotStartAdvertisingPeer:
initWithPeer:serviceType:
startBrowsingForPeers
stopBrowsingForPeers
invitePeer:toSession:withContext:timeout:
browser:foundPeer:withDiscoveryInfo:
browser:lostPeer:
browser:didNotStartBrowsingForPeers:
initWithDisplayName:
initWithPeer:
initWithPeer:securityIdentity:encryptionPreference:
sendData:toPeers:withMode:error:
sendResourceAtURL:withName:toPeer:withCompletionHandler:
startStreamWithName:toPeer:error:
session:didReceiveData:fromPeer:
session:didReceiveStream:withName:fromPeer:
session:didStartReceivingResourceWithName:fromPeer:withProgress:
session:didFinishReceivingResourceWithName:fromPeer:atURL:withError:
session:didReceiveCertificate:fromPeer:certificateHandler:
nearbyConnectionDataForPeer:withCompletionHandler:
connectPeer:withNearbyConnectionData:
cancelConnectPeer:
openWithLocalEndpoint:completionHandler:
closeReadWithError:
closeWriteWithError:
startProxyWithOptions:completionHandler:
stopProxyWithReason:completionHandler:
cancelProxyWithError:
handleNewFlow:
readDataWithCompletionHandler:
writeData:withCompletionHandler:
readDatagramsWithCompletionHandler:
writeDatagrams:sentByEndpoints:completionHandler:
initWithSigningIdentifier:
initWithSigningIdentifier:designatedRequirement:
initWithServers:
handleRemediationForFlow:completionHandler:
handleNewFlow:completionHandler:
notifyRulesChanged
handleInboundDataFromFlow:readBytesStartOffset:readBytes:
handleOutboundDataFromFlow:readBytesStartOffset:readBytes:
handleInboundDataCompleteForFlow:
handleOutboundDataCompleteForFlow:
handleRemediationForFlow:
handleRulesChanged
loadFromPreferencesWithCompletionHandler:
removeFromPreferencesWithCompletionHandler:
saveToPreferencesWithCompletionHandler:
startFilterWithCompletionHandler:
stopFilterWithReason:completionHandler:
setConfidence:
setPassword:
createResponse:
createTCPConnection:
createUDPSession:
setNetwork:
setNetworkList:
deliver
	NS_AVAILABLE(NA, 9_0)
bindToHotspotHelperCommand:
initWithAddresses:subnetMasks:
initWithDestinationAddress:subnetMask:
initWithAddresses:networkPrefixLengths:
initWithDestinationAddress:networkPrefixLength:
initWithMatchDomains:andAction:
readPacketsWithCompletionHandler:
writePackets:withProtocols:
startTunnelWithOptions:completionHandler:
stopTunnelWithReason:completionHandler:
cancelTunnelWithError:
createTCPConnectionThroughTunnelToEndpoint:enableTLS:TLSParameters:delegate:
createUDPSessionThroughTunnelToEndpoint:fromEndpoint:
sleepWithCompletionHandler:
wake
createTCPConnectionToEndpoint:enableTLS:TLSParameters:delegate:
createUDPSessionToEndpoint:fromEndpoint:
initWithAddress:port:
initWithTunnelRemoteAddress:
handleAppMessage:completionHandler:
setTunnelNetworkSettings:completionHandler:
startTunnelWithOptions:andReturnError:
stopTunnel
sendProviderMessage:returnError:responseHandler:
startVPNTunnelAndReturnError:
startVPNTunnelWithOptions:andReturnError:
stopVPNTunnel
setAuthorization:
isEqualToPath:
initWithUpgradeForConnection:
readLength:completionHandler:
readMinimumLength:maximumLength:completionHandler:
write:completionHandler:
writeClose
shouldProvideIdentityForConnection:
provideIdentityForConnection:completionHandler:
shouldEvaluateTrustForConnection:
evaluateTrustForConnection:peerCertificateChain:completionHandler:
initWithUpgradeForSession:
tryNextResolvedEndpoint
setReadHandler:maxDatagrams:
writeMultipleDatagrams:completionHandler:
writeDatagram:completionHandler:
downloadWithDelegate:
addAssetWithRequest:
issueWithName:
addIssueWithName:date:
removeIssue:
setHasContent:forWidgetWithBundleIdentifier:
widgetPerformUpdateWithCompletionHandler:
widgetMarginInsetsForProposedMarginInsets:
initWithAPI:
initWithAPI:sharegroup:
renderbufferStorage:fromDrawable:
presentRenderbuffer:
initWithAddPassButtonStyle:
addPassesViewControllerDidFinish:
initWithPass:
initWithPasses:
initWithEncryptionScheme:
addPaymentPassViewController:generateRequestWithCertificateChain:nonce:nonceSignature:completionHandler:
addPaymentPassViewController:didFinishAddingPaymentPass:error:
initWithRequestConfiguration:delegate:
localizedValueForFieldKey:
isPaymentPassActivationAvailable
passWithPassTypeIdentifier:serialNumber:
removePass:
containsPass:
replacePassWithPass:
addPasses:withCompletionHandler:
openPaymentSetup __WATCHOS_PROHIBITED
canAddPaymentPassWithPrimaryAccountIdentifier:
activatePaymentPass:withActivationData:completion:
activatePaymentPass:withActivationCode:completion:
paymentAuthorizationViewController:didAuthorizePayment:completion:
paymentAuthorizationViewControllerDidFinish:
paymentAuthorizationViewControllerWillAuthorizePayment:
paymentAuthorizationViewController:didSelectShippingMethod:completion:
paymentAuthorizationViewController:didSelectShippingAddress:
paymentAuthorizationViewController:didSelectShippingContact:
paymentAuthorizationViewController:didSelectPaymentMethod:completion:
initWithPaymentRequest:
initWithPaymentButtonType:paymentButtonStyle:
initWithFormatIdentifier:formatVersion:data:
canPerformEditOperation:
revertAssetContentToOriginal
requestContentEditingInputWithOptions:completionHandler:
cancelContentEditingInputRequest:
initWithPlaceholderForCreatedAsset:
addAssets:
insertAssets:atIndexes:
removeAssets:
removeAssetsAtIndexes:
replaceAssetsAtIndexes:withAssets:
moveAssetsAtIndexes:toIndex:
addResourceWithType:fileURL:options:
addResourceWithType:data:options:
requestDataForAssetResource:options:dataReceivedHandler:completionHandler:
writeDataForAssetResource:toFile:options:completionHandler:
cancelDataRequest:
changeDetailsForObject:
changeDetailsForFetchResult:
enumerateMovesWithBlock:
addChildCollections:
insertChildCollections:atIndexes:
removeChildCollections:
removeChildCollectionsAtIndexes:
replaceChildCollectionsAtIndexes:withChildCollections:
moveChildCollectionsAtIndexes:toIndex:
initWithContentEditingInput:
countOfAssetsWithMediaType:
requestImageForAsset:targetSize:contentMode:options:resultHandler:
requestImageDataForAsset:options:resultHandler:
cancelImageRequest:
requestLivePhotoForAsset:targetSize:contentMode:options:resultHandler:
requestPlayerItemForVideo:options:resultHandler:
requestExportSessionForVideo:options:exportPreset:resultHandler:
requestAVAssetForVideo:options:resultHandler:
startCachingImagesForAssets:targetSize:contentMode:options:
stopCachingImagesForAssets:targetSize:contentMode:options:
stopCachingImagesForAllAssets
photoLibraryDidChange:
performChanges:completionHandler:
performChangesAndWait:error:
registerChangeObserver:
unregisterChangeObserver:
canHandleAdjustmentData:
startContentEditingWithInput:placeholderImage:
finishContentEditingWithCompletionHandler:
cancelContentEditing
startPlaybackWithStyle:
stopPlayback
livePhotoView:willBeginPlaybackWithStyle:
livePhotoView:didEndPlaybackWithStyle:
pushTokenForType:
initWithQueue:
pushRegistry:didUpdatePushCredentials:forType:
pushRegistry:didReceiveIncomingPushWithPayload:forType:
pushRegistry:didInvalidatePushTokenForType:
shouldArchiveValueForKey:
animationDidStart:
animationDidStop:finished:
addToRunLoop:forMode:
initWithType:
initWithLayer:
presentationLayer
modelLayer
affineTransform
setAffineTransform:
contentsAreFlipped
removeFromSuperlayer
addSublayer:
insertSublayer:atIndex:
insertSublayer:below:
insertSublayer:above:
replaceSublayer:with:
convertPoint:fromLayer:
convertPoint:toLayer:
convertRect:fromLayer:
convertRect:toLayer:
convertTime:fromLayer:
convertTime:toLayer:
hitTest:
containsPoint:
setNeedsDisplayInRect:
needsDisplay
displayIfNeeded
drawInContext:
renderInContext:
preferredFrameSize
setNeedsLayout
needsLayout
layoutIfNeeded
layoutSublayers
addAnimation:forKey:
removeAllAnimations
removeAnimationForKey:
animationForKey:
runActionForKey:object:arguments:
displayLayer:
drawLayer:inContext:
layoutSublayersOfLayer:
initWithControlPoints::::
getControlPointAtIndex:values:
scrollToPoint:
scrollToRect:
scrollPoint:
scrollRectToVisible:
refreshCurrentPreviewItem
numberOfPreviewItemsInPreviewController:
previewControllerWillDismiss:
previewControllerDidDismiss:
previewController:shouldOpenURL:forPreviewItem:
previewController:frameForPreviewItem:inSourceView:
previewController:transitionImageForPreviewItem:contentRect:
previewControllerDidFinish:
previewController:didFinishWithActivityTypes:
init __attribute__((unavailable("use sharedRecorder instead")))
startRecordingWithMicrophoneEnabled:handler:
stopRecordingWithHandler:
discardRecordingWithHandler:
screenRecorder:didStopRecordingWithError:previewViewController:
screenRecorderDidChangeAvailability:
initWithNibName:bundle:
initWithURL:entersReaderIfAvailable:
safariViewControllerDidFinish:
safariViewController:didCompleteInitialLoad:
addReadingListItemWithURL:title:previewText:error:
runAction:
runAction:completionHandler:
runAction:forKey:
runAction:forKey:completionHandler:
actionForKey:
removeActionForKey:
reversedAction
pauseAnimationForKey:
resumeAnimationForKey:
isAnimationForKeyPaused:
removeAnimationForKey:fadeOutDuration:
initWithFileNamed:
initWithSource:
initWithAVAudioNode:
addAudioPlayer:
removeAllAudioPlayers
removeAudioPlayer:
getBoundingBoxMin:max:
getBoundingSphereCenter:radius:
setBoundingBoxMin:max:
projectionTransform
setProjectionTransform:
initWithChainRootNode:
setMaxAllowedRotationAngle:forJoint:
maxAllowedRotationAngleForJoint:
insertMaterial:atIndex:
removeMaterialAtIndex:
replaceMaterialAtIndex:withMaterial:
materialWithName:
geometryElementAtIndex:
setWeight:forTargetAtIndex:
weightForTargetAtIndex:
clone
flattenedClone
addChildNode:
insertChildNode:atIndex:
removeFromParentNode
replaceChildNode:with:
childNodeWithName:recursively:
enumerateChildNodesUsingBlock:
convertPosition:toNode:
convertPosition:fromNode:
convertTransform:toNode:
convertTransform:fromNode:
renderNode:renderer:arguments:
handleEvent:forProperties:withBlock:
addModifierForProperties:atStage:withBlock:
removeModifiersOfStage:
removeAllModifiers
addParticleSystem:
removeAllParticleSystems
removeParticleSystem:
addParticleSystem:withTransform:
applyEngineForce:forWheelAtIndex:
setSteeringAngle:forWheelAtIndex:
applyBrakingForce:forWheelAtIndex:
applyForce:impulse:
applyForce:atPosition:impulse:
applyTorque:impulse:
clearAllForces
resetTransform
physicsWorld:didBeginContact:
physicsWorld:didUpdateContact:
physicsWorld:didEndContact:
addBehavior:
removeBehavior:
removeAllBehaviors
updateCollisionPairs
renderAtTime:
renderAtTime:viewport:commandBuffer:passDescriptor:
render
attributeForKey:
setAttribute:forKey:
textureCoordinatesWithMappingChannel:
presentScene:withTransition:incomingPointOfView:completionHandler:
isNodeInsideFrustum:withPointOfView:
projectPoint:
unprojectPoint:
prepareObject:shouldAbortBlock:
prepareObjects:withCompletionHandler:
renderer:updateAtTime:
renderer:didApplyAnimationsAtTime:
renderer:didSimulatePhysicsAtTime:
renderer:willRenderScene:atTime:
renderer:didRenderScene:atTime:
sceneWithOptions:statusHandler:
sceneWithOptions:error:
entryWithIdentifier:withClass:
writeBytes:length:
handleBindingOfSymbol:usingBlock:
handleUnbindingOfSymbol:usingBlock:
handleBindingOfBufferNamed:frequency:usingBlock:
setSemantic:forSymbol:options:
semanticForSymbol:
program:handleError:
programIsOpaque:
initWithFrame:options:
snapshot
pause:
stop:
presentationAnimationDidFinish
didSelectPost
didSelectCancel
isContentValid
validateContent
configurationItems
reloadConfigurationItems
pushConfigurationViewController:
popConfigurationViewController
loadPreviewView
setInitialText:
addImage:
removeAllImages
addURL:
removeAllURLs
addMultipartData:withName:type:filename:
addMultipartData:withName:type:
preparedURLRequest
performRequestWithHandler:
initWithViewportSize:
containsNode:
initWithLowerLimit:upperLimit:
advanceSimulationTime:
resetSimulation
initWithKeyframeValues:times:
count
addKeyframeValue:time:
removeLastKeyframe
removeKeyframeAtIndex:
setKeyframeValue:forIndex:
setKeyframeTime:forIndex:
setKeyframeValue:time:forIndex:
getKeyframeValueForIndex:
getKeyframeTimeForIndex:
sampleAtTime:
initWithFontNamed:
initWithSize:
initWithSize:pixelFormat:
modifyPixelDataWithBlock:
calculateAccumulatedFrame
setScale:
insertChild:atIndex:
removeChildrenInArray:
removeAllChildren
removeFromParent
moveToParent:
childNodeWithName:
enumerateChildNodesWithName:usingBlock:
inParentHierarchy:
runAction:completion:
runAction:withKey:
hasActions
nodeAtPoint:
convertPoint:fromNode:
convertPoint:toNode:
intersectsNode:
isEqualToNode:
locationInNode:
previousLocationInNode:
applyForce:
applyForce:atPoint:
applyTorque:
applyImpulse:
applyImpulse:atPoint:
applyAngularImpulse:
didBeginContact:
didEndContact:
addJoint:
removeJoint:
removeAllJoints
sampleFieldsAt:
bodyAtPoint:
bodyInRect:
bodyAlongRayStart:end:
enumerateBodiesAtPoint:usingBlock:
enumerateBodiesInRect:usingBlock:
enumerateBodiesAlongRayStart:end:usingBlock:
initWithLowerAngleLimit:upperAngleLimit:
didLoadReferenceNode:
resolveReferenceNode
inverseRegion
regionByUnionWithRegion:
regionByDifferenceFromRegion:
regionByIntersectionWithRegion:
update:forScene:
didEvaluateActionsForScene:
didSimulatePhysicsForScene:
didApplyConstraintsForScene:
didFinishUpdateForScene:
convertPointFromView:
convertPointToView:
update:
didEvaluateActions
didSimulatePhysics
didApplyConstraints
didFinishUpdate
didMoveToView:
willMoveFromView:
didChangeSize:
initWithSource:uniforms:
addUniform:
uniformNamed:
removeUniformNamed:
initWithTexture:color:size:
initWithTexture:
initWithImageNamed:
initWithColor:size:
textureByApplyingCIFilter:
textureByGeneratingNormalMap
textureByGeneratingNormalMapWithSmoothness:contrast:
textureRect
CGImage CF_RETURNS_RETAINED
preloadWithCompletionHandler:
textureNamed:
initWithName:texture:
initWithName:float:
initWithName:floatVector2:
initWithName:floatVector3:
initWithName:floatVector4:
initWithName:floatMatrix2:
initWithName:floatMatrix3:
initWithName:floatMatrix4:
initWithAVPlayer:
initWithVideoFileNamed:
initWithVideoURL:
presentScene:
presentScene:transition:
textureFromNode:
textureFromNode:crop:
convertPoint:toScene:
convertPoint:fromScene:
requestStorefrontIdentifierWithCompletionHandler:
requestCapabilitiesWithCompletionHandler:
addPayment:
restoreCompletedTransactions
restoreCompletedTransactionsWithApplicationUsername:
finishTransaction:
startDownloads:
pauseDownloads:
resumeDownloads:
cancelDownloads:
addTransactionObserver:
removeTransactionObserver:
paymentQueue:updatedTransactions:
paymentQueue:removedTransactions:
paymentQueue:restoreCompletedTransactionsFailedWithError:
paymentQueueRestoreCompletedTransactionsFinished:
paymentQueue:updatedDownloads:
productsRequest:didReceiveResponse:
initWithProductIdentifiers:
initWithReceiptProperties:
requestDidFinish:
request:didFailWithError:
loadProductWithParameters:completionBlock:
productViewControllerDidFinish:
initWithURL:parameters:requestMethod:
addMultiPartData:withName:type:
signedURLRequest
fixAttributesInRange:
initWithURL:options:documentAttributes:error:
initWithData:options:documentAttributes:error:
dataFromRange:documentAttributes:error:
fileWrapperFromRange:documentAttributes:error:
readFromURL:options:documentAttributes:error:
readFromData:options:documentAttributes:error:
containsAttachmentsInRange:
initWithFileURL:options:documentAttributes:error:
readFromFileURL:options:documentAttributes:error:
initWithName:bundle:
providerIdentifier
documentStorageURL
URLForItemWithPersistentIdentifier:
persistentIdentifierForItemAtURL:
providePlaceholderAtURL:completionHandler:
startProvidingItemAtURL:completionHandler:
itemChangedAtURL:
stopProvidingItemAtURL:
constraintEqualToAnchor:
constraintGreaterThanOrEqualToAnchor:
constraintLessThanOrEqualToAnchor:
constraintEqualToAnchor:constant:
constraintGreaterThanOrEqualToAnchor:constant:
constraintLessThanOrEqualToAnchor:constant:
constraintEqualToConstant:
constraintGreaterThanOrEqualToConstant:
constraintLessThanOrEqualToConstant:
constraintEqualToAnchor:multiplier:
constraintGreaterThanOrEqualToAnchor:multiplier:
constraintLessThanOrEqualToAnchor:multiplier:
constraintEqualToAnchor:multiplier:constant:
constraintGreaterThanOrEqualToAnchor:multiplier:constant:
constraintLessThanOrEqualToAnchor:multiplier:constant:
addTextContainer:
insertTextContainer:atIndex:
removeTextContainerAtIndex:
textContainerChangedGeometry:
invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:
invalidateLayoutForCharacterRange:actualCharacterRange:
invalidateDisplayForCharacterRange:
invalidateDisplayForGlyphRange:
processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:
ensureGlyphsForCharacterRange:
ensureGlyphsForGlyphRange:
ensureLayoutForCharacterRange:
ensureLayoutForGlyphRange:
ensureLayoutForTextContainer:
ensureLayoutForBoundingRect:inTextContainer:
setGlyphs:properties:characterIndexes:font:forGlyphRange:
CGGlyphAtIndex:isValidIndex:
CGGlyphAtIndex:
isValidGlyphIndex:
propertyForGlyphAtIndex:
characterIndexForGlyphAtIndex:
glyphIndexForCharacterAtIndex:
getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:
setTextContainer:forGlyphRange:
setLineFragmentRect:forGlyphRange:usedRect:
setExtraLineFragmentRect:usedRect:textContainer:
setLocation:forStartOfGlyphRange:
setNotShownAttribute:forGlyphAtIndex:
setDrawsOutsideLineFragment:forGlyphAtIndex:
setAttachmentSize:forGlyphRange:
getFirstUnlaidCharacterIndex:glyphIndex:
firstUnlaidCharacterIndex
firstUnlaidGlyphIndex
textContainerForGlyphAtIndex:effectiveRange:
textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:
usedRectForTextContainer:
lineFragmentRectForGlyphAtIndex:effectiveRange:
lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:
lineFragmentUsedRectForGlyphAtIndex:effectiveRange:
lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:
locationForGlyphAtIndex:
notShownAttributeForGlyphAtIndex:
drawsOutsideLineFragmentForGlyphAtIndex:
attachmentSizeForGlyphAtIndex:
truncatedGlyphRangeInLineFragmentForGlyphAtIndex:
glyphRangeForCharacterRange:actualCharacterRange:
characterRangeForGlyphRange:actualGlyphRange:
glyphRangeForTextContainer:
rangeOfNominallySpacedGlyphsContainingIndex:
boundingRectForGlyphRange:inTextContainer:
glyphRangeForBoundingRect:inTextContainer:
glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:
glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:
glyphIndexForPoint:inTextContainer:
fractionOfDistanceThroughGlyphForPoint:inTextContainer:
characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:
getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:
enumerateLineFragmentsForGlyphRange:usingBlock:
enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:
drawBackgroundForGlyphRange:atPoint:
drawGlyphsForGlyphRange:atPoint:
showCGGlyphs:positions:count:font:matrix:attributes:inContext:
fillBackgroundRectArray:count:forCharacterRange:color:
drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:
underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:
drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:
strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:
layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:
layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:
layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:
layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:
layoutManager:shouldUseAction:forControlCharacterAtIndex:
layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:
layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:
layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:
layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:
layoutManagerDidInvalidateLayout:
layoutManager:didCompleteLayoutForTextContainer:atEnd:
layoutManager:textContainer:didChangeGeometryFromSize:
glyphAtIndex:isValidIndex:
glyphAtIndex:
initWithTextAlignment:location:options:
addTabStop:
removeTabStop:
setParagraphStyle:
sizeWithAttributes:
drawAtPoint:withAttributes:
drawInRect:withAttributes:
drawAtPoint:
drawInRect:
drawWithRect:options:attributes:context:
boundingRectWithSize:options:attributes:context:
drawWithRect:options:context:
boundingRectWithSize:options:context:
imageForBounds:textContainer:characterIndex:
attachmentBoundsForTextContainer:proposedLineFragment:glyphPosition:characterIndex:
initWithData:ofType:
replaceLayoutManager:
lineFragmentRectForProposedRect:atIndex:writingDirection:remainingRect:
addLayoutManager:
removeLayoutManager:
edited:range:changeInLength:
processEditing
invalidateAttributesInRange:
ensureAttributesAreFixedInRange:
textStorage:willProcessEditing:range:changeInLength:
textStorage:didProcessEditing:range:changeInLength:
accelerometer:didAccelerate:
accessibilityElementCount
accessibilityElementAtIndex:
indexOfAccessibilityElement:
accessibilityElementDidBecomeFocused
accessibilityElementDidLoseFocus
accessibilityElementIsFocused
accessibilityActivate
accessibilityIncrement
accessibilityDecrement
accessibilityScroll:
accessibilityPerformEscape
accessibilityPerformMagicTap
accessibilityLineNumberForPoint:
accessibilityContentForLineNumber:
accessibilityFrameForLineNumber:
accessibilityPageContent
pickerView:accessibilityLabelForComponent:
pickerView:accessibilityHintForComponent:
accessibilityScrollStatusForScrollView:
initWithName:target:selector:
initWithAccessibilityContainer:
initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:
addButtonWithTitle:
buttonTitleAtIndex:
showFromToolbar:
showFromTabBar:
showFromBarButtonItem:animated:
showFromRect:inView:animated:
showInView:
dismissWithClickedButtonIndex:animated:
actionSheet:clickedButtonAtIndex:
actionSheetCancel:
willPresentActionSheet:
didPresentActionSheet:
actionSheet:willDismissWithButtonIndex:
actionSheet:didDismissWithButtonIndex:
activityType
activityTitle
activityImage
canPerformWithActivityItems:
prepareWithActivityItems:
activityViewController
performActivity
activityDidFinish:
initWithActivityIndicatorStyle:
initWithFrame:
startAnimating
stopAnimating
isAnimating
activityViewControllerPlaceholderItem:
activityViewController:itemForActivityType:
activityViewController:subjectForActivityType:
activityViewController:dataTypeIdentifierForActivityType:
activityViewController:thumbnailImageForActivityType:suggestedSize:
initWithPlaceholderItem:
item
initWithActivityItems:applicationActivities:
addAction:
addTextFieldWithConfigurationHandler:
initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:
textFieldAtIndex:
alertView:clickedButtonAtIndex:
alertViewCancel:
willPresentAlertView:
didPresentAlertView:
alertView:willDismissWithButtonIndex:
alertView:didDismissWithButtonIndex:
alertViewShouldEnableFirstOtherButton:
beginIgnoringInteractionEvents
endIgnoringInteractionEvents
isIgnoringInteractionEvents
openURL:
canOpenURL:
sendEvent:
sendAction:to:from:forEvent:
supportedInterfaceOrientationsForWindow:
beginBackgroundTaskWithExpirationHandler:
beginBackgroundTaskWithName:expirationHandler:
endBackgroundTask:
setMinimumBackgroundFetchInterval:
registerForRemoteNotifications
unregisterForRemoteNotifications
isRegisteredForRemoteNotifications
registerForRemoteNotificationTypes:
enabledRemoteNotificationTypes
presentLocalNotificationNow:
scheduleLocalNotification:
cancelLocalNotification:
cancelAllLocalNotifications
registerUserNotificationSettings:
currentUserNotificationSettings
beginReceivingRemoteControlEvents
endReceivingRemoteControlEvents
setNewsstandIconImage:
extendStateRestoration
completeStateRestoration
ignoreSnapshotOnNextApplicationLaunch
applicationDidFinishLaunching:
application:willFinishLaunchingWithOptions:
application:didFinishLaunchingWithOptions:
applicationDidBecomeActive:
applicationWillResignActive:
application:handleOpenURL:
application:openURL:sourceApplication:annotation:
application:openURL:options:
applicationDidReceiveMemoryWarning:
applicationWillTerminate:
applicationSignificantTimeChange:
application:willChangeStatusBarOrientation:duration:
application:didChangeStatusBarOrientation:
application:willChangeStatusBarFrame:
application:didChangeStatusBarFrame:
application:didRegisterUserNotificationSettings:
application:didRegisterForRemoteNotificationsWithDeviceToken:
application:didFailToRegisterForRemoteNotificationsWithError:
application:didReceiveRemoteNotification:
application:didReceiveLocalNotification:
application:handleActionWithIdentifier:forLocalNotification:completionHandler:
application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:
application:handleActionWithIdentifier:forRemoteNotification:completionHandler:
application:handleActionWithIdentifier:forLocalNotification:withResponseInfo:completionHandler:
application:didReceiveRemoteNotification:fetchCompletionHandler:
application:performFetchWithCompletionHandler:
application:performActionForShortcutItem:completionHandler:
application:handleEventsForBackgroundURLSession:completionHandler:
application:handleWatchKitExtensionRequest:reply:
applicationShouldRequestHealthAuthorization:
applicationDidEnterBackground:
applicationWillEnterForeground:
applicationProtectedDataWillBecomeUnavailable:
applicationProtectedDataDidBecomeAvailable:
application:supportedInterfaceOrientationsForWindow:
application:shouldAllowExtensionPointIdentifier:
application:viewControllerWithRestorationIdentifierPath:coder:
application:shouldSaveApplicationState:
application:shouldRestoreApplicationState:
application:willEncodeRestorableStateWithCoder:
application:didDecodeRestorableStateWithCoder:
application:willContinueUserActivityWithType:
application:continueUserActivity:restorationHandler:
application:didFailToContinueUserActivityWithType:error:
application:didUpdateUserActivity:
setStatusBarHidden:animated:
setStatusBarOrientation:animated:
setStatusBarStyle:animated:
setStatusBarHidden:withAnimation:
setKeepAliveTimeout:handler:
clearKeepAliveTimeout
initWithType:localizedTitle:localizedSubtitle:icon:userInfo:
initWithType:localizedTitle:
initWithItem:attachedToAnchor:
initWithItem:offsetFromCenter:attachedToAnchor:
initWithItem:attachedToItem:
initWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:
initWithImage:style:target:action:
initWithImage:landscapeImagePhone:style:target:action:
initWithTitle:style:target:action:
initWithBarButtonSystemItem:target:action:
initWithCustomView:
setBackgroundImage:forState:barMetrics:
backgroundImageForState:barMetrics:
setBackgroundImage:forState:style:barMetrics:
backgroundImageForState:style:barMetrics:
setBackgroundVerticalPositionAdjustment:forBarMetrics:
backgroundVerticalPositionAdjustmentForBarMetrics:
setTitlePositionAdjustment:forBarMetrics:
titlePositionAdjustmentForBarMetrics:
setBackButtonBackgroundImage:forState:barMetrics:
backButtonBackgroundImageForState:barMetrics:
setBackButtonTitlePositionAdjustment:forBarMetrics:
backButtonTitlePositionAdjustmentForBarMetrics:
setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:
backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:
initWithBarButtonItems:representativeItem:
positionForBar:
setTitleTextAttributes:forState:
CGPath
moveToPoint:
addLineToPoint:
addCurveToPoint:controlPoint1:controlPoint2:
addQuadCurveToPoint:controlPoint:
addArcWithCenter:radius:startAngle:endAngle:clockwise:
closePath
removeAllPoints
appendPath:
bezierPathByReversingPath
applyTransform:
setLineDash:count:phase:
getLineDash:count:phase:
fill
stroke
fillWithBlendMode:alpha:
strokeWithBlendMode:alpha:
addClip
setTitle:forState:
setTitleColor:forState:
setTitleShadowColor:forState:
setImage:forState:
setBackgroundImage:forState:
setAttributedTitle:forState:
titleForState:
titleColorForState:
titleShadowColorForState:
imageForState:
backgroundImageForState:
attributedTitleForState:
backgroundRectForBounds:
contentRectForBounds:
titleRectForContentRect:
imageRectForContentRect:
collectionView:numberOfItemsInSection:
collectionView:cellForItemAtIndexPath:
numberOfSectionsInCollectionView:
collectionView:viewForSupplementaryElementOfKind:atIndexPath:
collectionView:canMoveItemAtIndexPath:
collectionView:moveItemAtIndexPath:toIndexPath:
collectionView:shouldHighlightItemAtIndexPath:
collectionView:didHighlightItemAtIndexPath:
collectionView:didUnhighlightItemAtIndexPath:
collectionView:shouldSelectItemAtIndexPath:
collectionView:shouldDeselectItemAtIndexPath:
collectionView:didSelectItemAtIndexPath:
collectionView:didDeselectItemAtIndexPath:
collectionView:willDisplayCell:forItemAtIndexPath:
collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:
collectionView:didEndDisplayingCell:forItemAtIndexPath:
collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:
collectionView:shouldShowMenuForItemAtIndexPath:
collectionView:canPerformAction:forItemAtIndexPath:withSender:
collectionView:performAction:forItemAtIndexPath:withSender:
collectionView:transitionLayoutForOldLayout:newLayout:
collectionView:canFocusItemAtIndexPath:
collectionView:shouldUpdateFocusInContext:
collectionView:didUpdateFocusInContext:withAnimationCoordinator:
indexPathForPreferredFocusedViewInCollectionView:
collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:
collectionView:targetContentOffsetForProposedContentOffset:
initWithFrame:collectionViewLayout:
registerClass:forCellWithReuseIdentifier:
registerNib:forCellWithReuseIdentifier:
registerClass:forSupplementaryViewOfKind:withReuseIdentifier:
registerNib:forSupplementaryViewOfKind:withReuseIdentifier:
dequeueReusableCellWithReuseIdentifier:forIndexPath:
dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:
selectItemAtIndexPath:animated:scrollPosition:
deselectItemAtIndexPath:animated:
setCollectionViewLayout:animated:
setCollectionViewLayout:animated:completion:
startInteractiveTransitionToCollectionViewLayout:completion:
finishInteractiveTransition
cancelInteractiveTransition
numberOfSections
numberOfItemsInSection:
layoutAttributesForItemAtIndexPath:
layoutAttributesForSupplementaryElementOfKind:atIndexPath:
indexPathForItemAtPoint:
indexPathForCell:
cellForItemAtIndexPath:
supplementaryViewForElementKind:atIndexPath:
scrollToItemAtIndexPath:atScrollPosition:animated:
insertSections:
deleteSections:
reloadSections:
moveSection:toSection:
insertItemsAtIndexPaths:
deleteItemsAtIndexPaths:
reloadItemsAtIndexPaths:
moveItemAtIndexPath:toIndexPath:
performBatchUpdates:completion:
beginInteractiveMovementForItemAtIndexPath:
updateInteractiveMovementTargetPosition:
endInteractiveMovement
cancelInteractiveMovement
applyLayoutAttributes:
willTransitionFromLayout:toLayout:
didTransitionFromLayout:toLayout:
preferredLayoutAttributesFittingAttributes:
initWithCollectionViewLayout:
collectionView:layout:sizeForItemAtIndexPath:
collectionView:layout:insetForSectionAtIndex:
collectionView:layout:minimumLineSpacingForSectionAtIndex:
collectionView:layout:minimumInteritemSpacingForSectionAtIndex:
collectionView:layout:referenceSizeForHeaderInSection:
collectionView:layout:referenceSizeForFooterInSection:
invalidateItemsAtIndexPaths:
invalidateSupplementaryElementsOfKind:atIndexPaths:
invalidateDecorationElementsOfKind:atIndexPaths:
invalidateLayout
invalidateLayoutWithContext:
registerClass:forDecorationViewOfKind:
registerNib:forDecorationViewOfKind:
prepareLayout
layoutAttributesForSupplementaryViewOfKind:atIndexPath:
layoutAttributesForDecorationViewOfKind:atIndexPath:
shouldInvalidateLayoutForBoundsChange:
invalidationContextForBoundsChange:
shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:
invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:
targetContentOffsetForProposedContentOffset:withScrollingVelocity:
targetContentOffsetForProposedContentOffset:
collectionViewContentSize
prepareForCollectionViewUpdates:
finalizeCollectionViewUpdates
prepareForAnimatedBoundsChange:
finalizeAnimatedBoundsChange
prepareForTransitionToLayout:
prepareForTransitionFromLayout:
finalizeLayoutTransition
initialLayoutAttributesForAppearingItemAtIndexPath:
finalLayoutAttributesForDisappearingItemAtIndexPath:
initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:
finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:
initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:
finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:
targetIndexPathForInteractivelyMovingItem:withPosition:
layoutAttributesForInteractivelyMovingItemAtIndexPath:withTargetPosition:
invalidationContextForInteractivelyMovingItems:withTargetPosition:previousIndexPaths:previousPosition:
invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths:previousIndexPaths:movementCancelled:
initWithCurrentLayout:nextLayout:
updateValue:forAnimatedKey:
valueForAnimatedKey:
collisionBehavior:beganContactForItem:withItem:atPoint:
collisionBehavior:endedContactForItem:withItem:
collisionBehavior:beganContactForItem:withBoundaryIdentifier:atPoint:
collisionBehavior:endedContactForItem:withBoundaryIdentifier:
addItem:
setTranslatesReferenceBoundsIntoBoundaryWithInsets:
addBoundaryWithIdentifier:forPath:
addBoundaryWithIdentifier:fromPoint:toPoint:
boundaryWithIdentifier:
removeBoundaryWithIdentifier:
removeAllBoundaries
initWithWhite:alpha:
initWithHue:saturation:brightness:alpha:
initWithPatternImage:
initWithCIColor:
set
setFill
setStroke
getWhite:alpha:
getHue:saturation:brightness:alpha:
getRed:green:blue:alpha:
colorWithAlphaComponent:
CGColor
beginTrackingWithTouch:withEvent:
continueTrackingWithTouch:withEvent:
endTrackingWithTouch:withEvent:
cancelTrackingWithEvent:
addTarget:action:forControlEvents:
removeTarget:action:forControlEvents:
allTargets
allControlEvents
sendAction:to:forEvent:
sendActionsForControlEvents:
setDate:animated:
beginGeneratingDeviceOrientationNotifications
endGeneratingDeviceOrientationNotifications
playInputClick
openWithCompletionHandler:
closeWithCompletionHandler:
loadFromContents:ofType:error:
contentsForType:error:
disableEditing
enableEditing
hasUnsavedChanges
updateChangeCount:
changeCountTokenForSaveOperation:
updateChangeCountWithToken:forSaveOperation:
saveToURL:forSaveOperation:completionHandler:
autosaveWithCompletionHandler:
savingFileType
fileNameExtensionForType:saveOperation:
writeContents:andAttributes:safelyToURL:forSaveOperation:error:
writeContents:toURL:forSaveOperation:originalContentsURL:error:
fileAttributesToWriteToURL:forSaveOperation:error:
readFromURL:error:
performAsynchronousFileAccessUsingBlock:
handleError:userInteractionPermitted:
finishedHandlingError:recovered:
userInteractionNoLongerPermittedForError:
revertToContentsOfURL:completionHandler:
updateUserActivityState:
restoreUserActivityState:
presentOptionsMenuFromRect:inView:animated:
presentOptionsMenuFromBarButtonItem:animated:
presentPreviewAnimated:
presentOpenInMenuFromRect:inView:animated:
presentOpenInMenuFromBarButtonItem:animated:
dismissPreviewAnimated:
dismissMenuAnimated:
documentInteractionControllerViewControllerForPreview:
documentInteractionControllerRectForPreview:
documentInteractionControllerViewForPreview:
documentInteractionControllerWillBeginPreview:
documentInteractionControllerDidEndPreview:
documentInteractionControllerWillPresentOptionsMenu:
documentInteractionControllerDidDismissOptionsMenu:
documentInteractionControllerWillPresentOpenInMenu:
documentInteractionControllerDidDismissOpenInMenu:
documentInteractionController:willBeginSendingToApplication:
documentInteractionController:didEndSendingToApplication:
documentInteractionController:canPerformAction:
documentInteractionController:performAction:
documentMenu:didPickDocumentPicker:
documentMenuWasCancelled:
initWithDocumentTypes:inMode:
initWithURL:inMode:
addOptionWithTitle:image:order:handler:
dismissGrantingAccessToURL:
prepareForPresentationInMode:
documentPicker:didPickDocumentAtURL:
documentPickerWasCancelled:
dynamicAnimatorWillResume:
dynamicAnimatorDidPause:
initWithReferenceView:
updateItemUsingCurrentState:
elapsedTime
layoutAttributesForCellAtIndexPath:
addChildBehavior:
removeChildBehavior:
willMoveToAnimator:
addLinearVelocity:forItem:
linearVelocityForItem:
addAngularVelocity:forItem:
angularVelocityForItem:
setNeedsFocusUpdate
updateFocusIfNeeded
shouldUpdateFocusInContext:
didUpdateFocusInContext:withAnimationCoordinator:
addCoordinatedAnimations:completion:
fontWithSize:
fontDescriptor
initWithFontAttributes:
fontDescriptorByAddingAttributes:
fontDescriptorWithSymbolicTraits:
fontDescriptorWithSize:
fontDescriptorWithMatrix:
fontDescriptorWithFace:
fontDescriptorWithFamily:
CGPointValue
CGVectorValue
CGSizeValue
CGRectValue
CGAffineTransformValue
UIEdgeInsetsValue
UIOffsetValue
encodeCGPoint:forKey:
encodeCGVector:forKey:
encodeCGSize:forKey:
encodeCGRect:forKey:
encodeCGAffineTransform:forKey:
encodeUIEdgeInsets:forKey:
encodeUIOffset:forKey:
decodeCGPointForKey:
decodeCGVectorForKey:
decodeCGSizeForKey:
decodeCGRectForKey:
decodeCGAffineTransformForKey:
decodeUIEdgeInsetsForKey:
decodeUIOffsetForKey:
initWithTarget:action:
requireGestureRecognizerToFail:
locationInView:
numberOfTouches
locationOfTouch:inView:
gestureRecognizerShouldBegin:
gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:
gestureRecognizer:shouldRequireFailureOfGestureRecognizer:
gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:
gestureRecognizer:shouldReceiveTouch:
gestureRecognizer:shouldReceivePress:
ignoreTouch:forEvent:
ignorePress:forEvent:
canPreventGestureRecognizer:
canBePreventedByGestureRecognizer:
shouldRequireFailureOfGestureRecognizer:
shouldBeRequiredToFailByGestureRecognizer:
touchesBegan:withEvent:
touchesMoved:withEvent:
touchesEnded:withEvent:
touchesCancelled:withEvent:
touchesEstimatedPropertiesUpdated:
pressesBegan:withEvent:
pressesChanged:withEvent:
pressesEnded:withEvent:
pressesCancelled:withEvent:
setAngle:magnitude:
guidedAccessRestrictionWithIdentifier:didChangeState:
textForGuidedAccessRestrictionWithIdentifier:
detailTextForGuidedAccessRestrictionWithIdentifier:
initWithData:scale:
initWithCGImage:scale:orientation:
initWithCIImage:
initWithCIImage:scale:orientation:
CGImage
drawAtPoint:blendMode:alpha:
drawInRect:blendMode:alpha:
drawAsPatternInRect:
resizableImageWithCapInsets:
resizableImageWithCapInsets:resizingMode:
imageWithAlignmentRectInsets:
imageWithRenderingMode:
imageFlippedForRightToLeftLayoutDirection
stretchableImageWithLeftCapWidth:topCapHeight:
imageWithTraitCollection:
registerImage:withTraitCollection:
unregisterImageWithTraitCollection:
takePicture
startVideoCapture
stopVideoCapture
imagePickerController:didFinishPickingImage:editingInfo:
imagePickerController:didFinishPickingMediaWithInfo:
imagePickerControllerDidCancel:
initWithImage:highlightedImage:
initWithFrame:inputViewStyle:
adjustTextPositionByCharacterOffset:
dismissKeyboard
advanceToNextInputMode
requestSupplementaryLexiconWithCompletion:
textRectForBounds:limitedToNumberOfLines:
drawTextInRect:
sectionForSectionIndexTitleAtIndex:
sectionForObject:collationStringSelector:
sortedArrayFromArray:collationStringSelector:
configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:
persistentStoreTypeForFileType:
readAdditionalContentFromURL:error:
additionalContentForURL:error:
writeAdditionalContent:toURL:originalContentsURL:error:
setMenuVisible:animated:
setTargetRect:inView:
update
initWithTitle:action:
initWithKeyPath:type:
pushNavigationItem:animated:
popNavigationItemAnimated:
setItems:animated:
setBackgroundImage:forBarPosition:barMetrics:
backgroundImageForBarPosition:barMetrics:
setBackgroundImage:forBarMetrics:
backgroundImageForBarMetrics:
setTitleVerticalPositionAdjustment:forBarMetrics:
titleVerticalPositionAdjustmentForBarMetrics:
navigationBar:shouldPushItem:
navigationBar:didPushItem:
navigationBar:shouldPopItem:
navigationBar:didPopItem:
initWithTitle:
setHidesBackButton:animated:
setLeftBarButtonItems:animated:
setRightBarButtonItems:animated:
setLeftBarButtonItem:animated:
setRightBarButtonItem:animated:
initWithNavigationBarClass:toolbarClass:
initWithRootViewController:
pushViewController:animated:
popViewControllerAnimated:
setViewControllers:animated:
setNavigationBarHidden:animated:
setToolbarHidden:animated:
showViewController:sender:
navigationController:willShowViewController:animated:
navigationController:didShowViewController:animated:
navigationControllerSupportedInterfaceOrientations:
navigationControllerPreferredInterfaceOrientationForPresentation:
setToolbarItems:animated:
instantiateWithOwner:options:
loadNibNamed:owner:options:
awakeFromNib
prepareForInterfaceBuilder
updateCurrentPageDisplay
sizeForNumberOfPages:
initWithTransitionStyle:navigationOrientation:options:
setViewControllers:direction:animated:completion:
pageViewController:willTransitionToViewControllers:
pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:
pageViewController:spineLocationForInterfaceOrientation:
pageViewControllerSupportedInterfaceOrientations:
pageViewControllerPreferredInterfaceOrientationForPresentation:
pageViewController:viewControllerBeforeViewController:
pageViewController:viewControllerAfterViewController:
presentationCountForPageViewController:
presentationIndexForPageViewController:
translationInView:
setTranslation:inView:
velocityInView:
containsPasteboardTypes:
dataForPasteboardType:
valueForPasteboardType:
setValue:forPasteboardType:
setData:forPasteboardType:
pasteboardTypesForItemSet:
containsPasteboardTypes:inItemSet:
itemSetWithPasteboardTypes:
valuesForPasteboardType:inItemSet:
dataForPasteboardType:inItemSet:
addItems:
numberOfRowsInComponent:
rowSizeForComponent:
viewForRow:forComponent:
reloadAllComponents
reloadComponent:
selectRow:inComponent:animated:
selectedRowInComponent:
numberOfComponentsInPickerView:
pickerView:numberOfRowsInComponent:
pickerView:widthForComponent:
pickerView:rowHeightForComponent:
pickerView:titleForRow:forComponent:
pickerView:attributedTitleForRow:forComponent:
pickerView:viewForRow:forComponent:reusingView:
pickerView:didSelectRow:inComponent:
initWithContentViewController:
setContentViewController:animated:
setPopoverContentSize:animated:
presentPopoverFromRect:inView:permittedArrowDirections:animated:
presentPopoverFromBarButtonItem:permittedArrowDirections:animated:
dismissPopoverAnimated:
popoverControllerShouldDismissPopover:
popoverControllerDidDismissPopover:
popoverController:willRepositionPopoverToRect:inView:
prepareForPopoverPresentation:
popoverPresentationControllerShouldDismissPopover:
popoverPresentationControllerDidDismissPopover:
popoverPresentationController:willRepositionPopoverToRect:inView:
adaptivePresentationStyleForPresentationController:
adaptivePresentationStyleForPresentationController:traitCollection:
presentationController:viewControllerForAdaptivePresentationStyle:
presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:
initWithPresentedViewController:presentingViewController:
adaptivePresentationStyle
adaptivePresentationStyleForTraitCollection:
containerViewWillLayoutSubviews
containerViewDidLayoutSubviews
presentedView
frameOfPresentedViewInContainerView
shouldPresentInFullscreen
shouldRemovePresentersView
presentationTransitionWillBegin
presentationTransitionDidEnd:
dismissalTransitionWillBegin
dismissalTransitionDidEnd:
contactPrinter:
printerPickerControllerParentViewController:
printerPickerController:shouldShowPrinter:
printerPickerControllerWillPresent:
printerPickerControllerDidPresent:
printerPickerControllerWillDismiss:
printerPickerControllerDidDismiss:
printerPickerControllerDidSelectPrinter:
presentAnimated:completionHandler:
presentFromRect:inView:animated:completionHandler:
presentFromBarButtonItem:animated:completionHandler:
dismissAnimated:
removeFromPrintPageRenderer
rectForPageAtIndex:
drawInRect:forPageAtIndex:
initWithText:
initWithAttributedText:
initWithMarkupText:
viewPrintFormatter
drawRect:forViewPrintFormatter:
dictionaryRepresentation
printToPrinter:completionHandler:
printInteractionControllerParentViewController:
printInteractionController:choosePaper:
printInteractionControllerWillPresentPrinterOptions:
printInteractionControllerDidPresentPrinterOptions:
printInteractionControllerWillDismissPrinterOptions:
printInteractionControllerDidDismissPrinterOptions:
printInteractionControllerWillStartJob:
printInteractionControllerDidFinishJob:
printInteractionController:cutLengthForPaper:
printInteractionController:chooseCutterBehavior:
addPrintFormatter:startingAtPageAtIndex:
numberOfPages
prepareForDrawingPages:
drawPageAtIndex:inRect:
drawPrintFormatter:forPageAtIndex:
drawHeaderForPageAtIndex:inRect:
drawContentForPageAtIndex:inRect:
drawFooterForPageAtIndex:inRect:
printRect
initWithProgressViewStyle:
setProgress:animated:
initWithItems:mode:
targetOffsetFromCenterForItem:
setTargetOffsetFromCenter:forItem:
initWithTerm:
beginRefreshing
endRefreshing
nextResponder
canBecomeFirstResponder
becomeFirstResponder
canResignFirstResponder
resignFirstResponder
isFirstResponder
motionBegan:withEvent:
motionEnded:withEvent:
motionCancelled:withEvent:
remoteControlReceivedWithEvent:
canPerformAction:withSender:
targetForAction:withSender:
cut:
copy:
paste:
select:
selectAll:
delete:
makeTextWritingDirectionLeftToRight:
makeTextWritingDirectionRightToLeft:
toggleBoldface:
toggleItalics:
toggleUnderline:
increaseSize:
decreaseSize:
reloadInputViews
displayLinkWithTarget:selector:
snapshotViewAfterScreenUpdates:
setContentOffset:animated:
scrollRectToVisible:animated:
flashScrollIndicators
touchesShouldBegin:withEvent:inContentView:
touchesShouldCancelInContentView:
setZoomScale:animated:
zoomToRect:animated:
scrollViewDidScroll:
scrollViewDidZoom:
scrollViewWillBeginDragging:
scrollViewWillEndDragging:withVelocity:targetContentOffset:
scrollViewDidEndDragging:willDecelerate:
scrollViewWillBeginDecelerating:
scrollViewDidEndDecelerating:
scrollViewDidEndScrollingAnimation:
viewForZoomingInScrollView:
scrollViewWillBeginZooming:withView:
scrollViewDidEndZooming:withView:atScale:
scrollViewShouldScrollToTop:
scrollViewDidScrollToTop:
setShowsCancelButton:animated:
setSearchFieldBackgroundImage:forState:
searchFieldBackgroundImageForState:
setImage:forSearchBarIcon:state:
imageForSearchBarIcon:state:
setScopeBarButtonBackgroundImage:forState:
scopeBarButtonBackgroundImageForState:
setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:
scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:
setScopeBarButtonTitleTextAttributes:forState:
setPositionAdjustment:forSearchBarIcon:
positionAdjustmentForSearchBarIcon:
searchBarShouldBeginEditing:
searchBarTextDidBeginEditing:
searchBarShouldEndEditing:
searchBarTextDidEndEditing:
searchBar:textDidChange:
searchBar:shouldChangeTextInRange:replacementText:
searchBarSearchButtonClicked:
searchBarBookmarkButtonClicked:
searchBarCancelButtonClicked:
searchBarResultsListButtonClicked:
searchBar:selectedScopeButtonIndexDidChange:
initWithSearchController:
willPresentSearchController:
didPresentSearchController:
willDismissSearchController:
didDismissSearchController:
presentSearchController:
updateSearchResultsForSearchController:
initWithSearchResultsController:
initWithSearchBar:contentsController:
setActive:animated:
searchDisplayControllerWillBeginSearch:
searchDisplayControllerDidBeginSearch:
searchDisplayControllerWillEndSearch:
searchDisplayControllerDidEndSearch:
searchDisplayController:didLoadSearchResultsTableView:
searchDisplayController:willUnloadSearchResultsTableView:
searchDisplayController:willShowSearchResultsTableView:
searchDisplayController:didShowSearchResultsTableView:
searchDisplayController:willHideSearchResultsTableView:
searchDisplayController:didHideSearchResultsTableView:
searchDisplayController:shouldReloadTableForSearchString:
searchDisplayController:shouldReloadTableForSearchScope:
insertSegmentWithTitle:atIndex:animated:
insertSegmentWithImage:atIndex:animated:
removeSegmentAtIndex:animated:
removeAllSegments
setTitle:forSegmentAtIndex:
titleForSegmentAtIndex:
setImage:forSegmentAtIndex:
imageForSegmentAtIndex:
setWidth:forSegmentAtIndex:
widthForSegmentAtIndex:
setContentOffset:forSegmentAtIndex:
contentOffsetForSegmentAtIndex:
setEnabled:forSegmentAtIndex:
isEnabledForSegmentAtIndex:
setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:
dividerImageForLeftSegmentState:rightSegmentState:barMetrics:
titleTextAttributesForState:
setContentPositionAdjustment:forSegmentType:barMetrics:
contentPositionAdjustmentForSegmentType:barMetrics:
setValue:animated:
setThumbImage:forState:
setMinimumTrackImage:forState:
setMaximumTrackImage:forState:
thumbImageForState:
minimumTrackImageForState:
maximumTrackImageForState:
minimumValueImageRectForBounds:
maximumValueImageRectForBounds:
trackRectForBounds:
thumbRectForBounds:trackRect:value:
initWithItem:snapToPoint:
displayModeButtonItem
showDetailViewController:sender:
splitViewController:willChangeToDisplayMode:
targetDisplayModeForActionInSplitViewController:
splitViewController:showViewController:sender:
splitViewController:showDetailViewController:sender:
primaryViewControllerForCollapsingSplitViewController:
primaryViewControllerForExpandingSplitViewController:
splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:
splitViewController:separateSecondaryViewControllerFromPrimaryViewController:
splitViewControllerSupportedInterfaceOrientations:
splitViewControllerPreferredInterfaceOrientationForPresentation:
splitViewController:willHideViewController:withBarButtonItem:forPopoverController:
splitViewController:willShowViewController:invalidatingBarButtonItem:
splitViewController:popoverController:willPresentViewController:
splitViewController:shouldHideViewController:inOrientation:
collapseSecondaryViewController:forSplitViewController:
separateSecondaryViewControllerForSplitViewController:
initWithArrangedSubviews:
addArrangedSubview:
removeArrangedSubview:
insertArrangedSubview:atIndex:
modelIdentifierForElementAtIndexPath:inView:
indexPathForElementWithModelIdentifier:inView:
encodeRestorableStateWithCoder:
decodeRestorableStateWithCoder:
applicationFinishedRestoringState
setDividerImage:forLeftSegmentState:rightSegmentState:
dividerImageForLeftSegmentState:rightSegmentState:
setIncrementImage:forState:
incrementImageForState:
setDecrementImage:forState:
decrementImageForState:
instantiateInitialViewController
instantiateViewControllerWithIdentifier:
initWithIdentifier:source:destination:
perform
sizeWithFont:
sizeWithFont:forWidth:lineBreakMode:
drawAtPoint:withFont:
drawAtPoint:forWidth:withFont:lineBreakMode:
sizeWithFont:constrainedToSize:
sizeWithFont:constrainedToSize:lineBreakMode:
drawInRect:withFont:
drawInRect:withFont:lineBreakMode:
drawInRect:withFont:lineBreakMode:alignment:
sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:
drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:
drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:
setOn:animated:
beginCustomizingItems:
endCustomizingAnimated:
isCustomizing
tabBar:didSelectItem:
tabBar:willBeginCustomizingItems:
tabBar:didBeginCustomizingItems:
tabBar:willEndCustomizingItems:changed:
tabBar:didEndCustomizingItems:changed:
tabBarController:shouldSelectViewController:
tabBarController:didSelectViewController:
tabBarController:willBeginCustomizingViewControllers:
tabBarController:willEndCustomizingViewControllers:changed:
tabBarController:didEndCustomizingViewControllers:changed:
tabBarControllerSupportedInterfaceOrientations:
tabBarControllerPreferredInterfaceOrientationForPresentation:
initWithTitle:image:tag:
initWithTitle:image:selectedImage:
initWithTabBarSystemItem:tag:
setFinishedSelectedImage:withFinishedUnselectedImage:
finishedSelectedImage
finishedUnselectedImage
tableView:willDisplayCell:forRowAtIndexPath:
tableView:willDisplayHeaderView:forSection:
tableView:willDisplayFooterView:forSection:
tableView:didEndDisplayingCell:forRowAtIndexPath:
tableView:didEndDisplayingHeaderView:forSection:
tableView:didEndDisplayingFooterView:forSection:
tableView:heightForRowAtIndexPath:
tableView:heightForHeaderInSection:
tableView:heightForFooterInSection:
tableView:estimatedHeightForRowAtIndexPath:
tableView:estimatedHeightForHeaderInSection:
tableView:estimatedHeightForFooterInSection:
tableView:viewForHeaderInSection:
tableView:viewForFooterInSection:
tableView:accessoryTypeForRowWithIndexPath:
tableView:accessoryButtonTappedForRowWithIndexPath:
tableView:shouldHighlightRowAtIndexPath:
tableView:didHighlightRowAtIndexPath:
tableView:didUnhighlightRowAtIndexPath:
tableView:willSelectRowAtIndexPath:
tableView:willDeselectRowAtIndexPath:
tableView:didSelectRowAtIndexPath:
tableView:didDeselectRowAtIndexPath:
tableView:editingStyleForRowAtIndexPath:
tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:
tableView:shouldIndentWhileEditingRowAtIndexPath:
tableView:willBeginEditingRowAtIndexPath:
tableView:didEndEditingRowAtIndexPath:
tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:
tableView:indentationLevelForRowAtIndexPath:
tableView:shouldShowMenuForRowAtIndexPath:
tableView:canPerformAction:forRowAtIndexPath:withSender:
tableView:performAction:forRowAtIndexPath:withSender:
tableView:canFocusRowAtIndexPath:
tableView:shouldUpdateFocusInContext:
tableView:didUpdateFocusInContext:withAnimationCoordinator:
indexPathForPreferredFocusedViewInTableView:
initWithFrame:style:
reloadSectionIndexTitles
numberOfRowsInSection:
rectForSection:
rectForHeaderInSection:
rectForFooterInSection:
rectForRowAtIndexPath:
indexPathForRowAtPoint:
cellForRowAtIndexPath:
headerViewForSection:
footerViewForSection:
scrollToRowAtIndexPath:atScrollPosition:animated:
scrollToNearestSelectedRowAtScrollPosition:animated:
insertSections:withRowAnimation:
deleteSections:withRowAnimation:
reloadSections:withRowAnimation:
insertRowsAtIndexPaths:withRowAnimation:
deleteRowsAtIndexPaths:withRowAnimation:
reloadRowsAtIndexPaths:withRowAnimation:
moveRowAtIndexPath:toIndexPath:
setEditing:animated:
selectRowAtIndexPath:animated:scrollPosition:
deselectRowAtIndexPath:animated:
dequeueReusableCellWithIdentifier:
dequeueReusableCellWithIdentifier:forIndexPath:
dequeueReusableHeaderFooterViewWithIdentifier:
registerNib:forCellReuseIdentifier:
registerClass:forCellReuseIdentifier:
registerNib:forHeaderFooterViewReuseIdentifier:
registerClass:forHeaderFooterViewReuseIdentifier:
tableView:numberOfRowsInSection:
tableView:cellForRowAtIndexPath:
numberOfSectionsInTableView:
tableView:titleForHeaderInSection:
tableView:titleForFooterInSection:
tableView:canEditRowAtIndexPath:
tableView:canMoveRowAtIndexPath:
tableView:sectionForSectionIndexTitle:atIndex:
tableView:commitEditingStyle:forRowAtIndexPath:
tableView:moveRowAtIndexPath:toIndexPath:
initWithStyle:reuseIdentifier:
setHighlighted:animated:
willTransitionToState:
didTransitionToState:
initWithFrame:reuseIdentifier:
initWithStyle:
initWithReuseIdentifier:
rangeOfMisspelledWordInString:range:startingAt:wrap:language:
guessesForWordRange:inString:language:
completionsForPartialWordRange:inString:language:
ignoreWord:
ignoredWords
setIgnoredWords:
borderRectForBounds:
textRectForBounds:
placeholderRectForBounds:
editingRectForBounds:
clearButtonRectForBounds:
leftViewRectForBounds:
rightViewRectForBounds:
drawPlaceholderInRect:
endEditing:
textFieldShouldBeginEditing:
textFieldDidBeginEditing:
textFieldShouldEndEditing:
textFieldDidEndEditing:
textField:shouldChangeCharactersInRange:replacementString:
textFieldShouldClear:
textFieldShouldReturn:
hasText
insertText:
deleteBackward
textInRange:
replaceRange:withText:
setMarkedText:selectedRange:
unmarkText
textRangeFromPosition:toPosition:
positionFromPosition:offset:
positionFromPosition:inDirection:offset:
comparePosition:toPosition:
offsetFromPosition:toPosition:
positionWithinRange:farthestInDirection:
characterRangeByExtendingPosition:inDirection:
baseWritingDirectionForPosition:inDirection:
setBaseWritingDirection:forRange:
firstRectForRange:
caretRectForPosition:
selectionRectsForRange:
closestPositionToPoint:
closestPositionToPoint:withinRange:
characterRangeAtPoint:
shouldChangeTextInRange:replacementText:
positionWithinRange:atCharacterOffset:
characterOffsetOfPosition:withinRange:
insertDictationResult:
dictationRecordingDidEnd
dictationRecognitionFailed
insertDictationResultPlaceholder
frameForDictationResultPlaceholder:
removeDictationResultPlaceholder:willInsertResult:
beginFloatingCursorAtPoint:
updateFloatingCursorAtPoint:
endFloatingCursor
selectionWillChange:
selectionDidChange:
textWillChange:
textDidChange:
rangeEnclosingPosition:withGranularity:inDirection:
isPosition:atBoundary:inDirection:
positionFromPosition:toBoundary:inDirection:
isPosition:withinTextUnit:inDirection:
initWithTextInput:
textViewShouldBeginEditing:
textViewShouldEndEditing:
textViewDidBeginEditing:
textViewDidEndEditing:
textView:shouldChangeTextInRange:replacementText:
textViewDidChange:
textViewDidChangeSelection:
textView:shouldInteractWithURL:inRange:
textView:shouldInteractWithTextAttachment:inRange:
scrollRangeToVisible:
initWithFrame:textContainer:
setBackgroundImage:forToolbarPosition:barMetrics:
backgroundImageForToolbarPosition:barMetrics:
setShadowImage:forToolbarPosition:
shadowImageForToolbarPosition:
previousLocationInView:
preciseLocationInView:
precisePreviousLocationInView:
azimuthAngleInView:
azimuthUnitVectorInView:
containsTraitsInCollection:
traitCollectionDidChange:
setActions:forContext:
videoEditorController:didSaveEditedVideoToPath:
videoEditorController:didFailWithError:
videoEditorControllerDidCancel:
convertPoint:toCoordinateSpace:
convertPoint:fromCoordinateSpace:
convertRect:toCoordinateSpace:
convertRect:fromCoordinateSpace:
canBecomeFocused
hitTest:withEvent:
pointInside:withEvent:
convertPoint:toView:
convertPoint:fromView:
convertRect:toView:
convertRect:fromView:
sizeThatFits:
sizeToFit
removeFromSuperview
insertSubview:atIndex:
exchangeSubviewAtIndex:withSubviewAtIndex:
addSubview:
insertSubview:belowSubview:
insertSubview:aboveSubview:
bringSubviewToFront:
sendSubviewToBack:
didAddSubview:
willRemoveSubview:
willMoveToSuperview:
didMoveToSuperview
willMoveToWindow:
didMoveToWindow
isDescendantOfView:
viewWithTag:
layoutSubviews
layoutMarginsDidChange
drawRect:
tintColorDidChange
addGestureRecognizer:
removeGestureRecognizer:
addMotionEffect:
removeMotionEffect:
addConstraint:
addConstraints:
removeConstraint:
removeConstraints:
updateConstraintsIfNeeded
updateConstraints
needsUpdateConstraints
setNeedsUpdateConstraints
alignmentRectForFrame:
frameForAlignmentRect:
alignmentRectInsets
viewForBaselineLayout
intrinsicContentSize
invalidateIntrinsicContentSize
contentHuggingPriorityForAxis:
setContentHuggingPriority:forAxis:
contentCompressionResistancePriorityForAxis:
setContentCompressionResistancePriority:forAxis:
systemLayoutSizeFittingSize:
systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:
addLayoutGuide:
removeLayoutGuide:
hasAmbiguousLayout
exerciseAmbiguityInLayout
resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:
drawViewHierarchyInRect:afterScreenUpdates:
preferredContentSizeDidChangeForChildContentContainer:
systemLayoutFittingSizeDidChangeForChildContentContainer:
sizeForChildContentContainer:withParentContainerSize:
viewWillTransitionToSize:withTransitionCoordinator:
willTransitionToTraitCollection:withTransitionCoordinator:
loadView
loadViewIfNeeded
viewWillUnload
viewDidUnload
viewDidLoad
isViewLoaded
performSegueWithIdentifier:sender:
shouldPerformSegueWithIdentifier:sender:
prepareForSegue:sender:
canPerformUnwindSegueAction:fromViewController:withSender:
childViewControllerContainingSegueSource:
viewControllerForUnwindSegueAction:fromViewController:withSender:
unwindForSegue:towardsViewController:
segueForUnwindingToViewController:fromViewController:identifier:
viewWillAppear:
viewDidAppear:
viewWillDisappear:
viewDidDisappear:
viewWillLayoutSubviews
viewDidLayoutSubviews
didReceiveMemoryWarning
isBeingPresented
isBeingDismissed
isMovingToParentViewController
isMovingFromParentViewController
presentViewController:animated:completion:
dismissViewControllerAnimated:completion:
presentModalViewController:animated:
dismissModalViewControllerAnimated:
disablesAutomaticKeyboardDismissal
preferredStatusBarStyle
prefersStatusBarHidden
preferredStatusBarUpdateAnimation
setNeedsStatusBarAppearanceUpdate
targetViewControllerForAction:sender:
shouldAutorotateToInterfaceOrientation:
shouldAutorotate
supportedInterfaceOrientations
preferredInterfaceOrientationForPresentation
rotatingHeaderView
rotatingFooterView
willRotateToInterfaceOrientation:duration:
didRotateFromInterfaceOrientation:
willAnimateRotationToInterfaceOrientation:duration:
willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:
didAnimateFirstHalfOfRotationToInterfaceOrientation:
willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:
editButtonItem
addChildViewController:
removeFromParentViewController
transitionFromViewController:toViewController:duration:options:animations:completion:
beginAppearanceTransition:animated:
endAppearanceTransition __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_5_0)
childViewControllerForStatusBarStyle
childViewControllerForStatusBarHidden
setOverrideTraitCollection:forChildViewController:
overrideTraitCollectionForChildViewController:
automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers
shouldAutomaticallyForwardRotationMethods
shouldAutomaticallyForwardAppearanceMethods
willMoveToParentViewController:
didMoveToParentViewController:
updateViewConstraints
addKeyCommand:
removeKeyCommand:
previewingContext:viewControllerForLocation:
previewingContext:commitViewController:
unregisterForPreviewingWithContext:
isAnimated
presentationStyle
initiallyInteractive
isInteractive
isCancelled
transitionDuration
percentComplete
completionVelocity
completionCurve
viewControllerForKey:
viewForKey:
containerView
targetTransform
animateAlongsideTransition:completion:
animateAlongsideTransitionInView:animation:completion:
notifyWhenInteractionEndsUsingBlock:
transitionWasCancelled
updateInteractiveTransition:
completeTransition:
initialFrameForViewController:
finalFrameForViewController:
transitionDuration:
animateTransition:
animationEnded:
startInteractiveTransition:
completionSpeed
presentationControllerForPresentedViewController:presentingViewController:sourceViewController:
initWithEffect:
loadRequest:
loadHTMLString:baseURL:
loadData:MIMEType:textEncodingName:baseURL:
reload
goBack
goForward
stringByEvaluatingJavaScriptFromString:
webView:shouldStartLoadWithRequest:navigationType:
webViewDidStartLoad:
webViewDidFinishLoad:
webView:didFailLoadWithError:
becomeKeyWindow
resignKeyWindow
makeKeyWindow
makeKeyAndVisible
convertPoint:toWindow:
convertPoint:fromWindow:
convertRect:toWindow:
convertRect:fromWindow:
activateSession
sendMessage:replyHandler:errorHandler:
sendMessageData:replyHandler:errorHandler:
updateApplicationContext:error:
transferUserInfo:
transferCurrentComplicationUserInfo:
transferFile:metadata:
session:activationDidCompleteWithState:error:
sessionDidBecomeInactive:
sessionDidDeactivate:
sessionWatchStateDidChange:
sessionReachabilityDidChange:
session:didReceiveMessage:
session:didReceiveMessage:replyHandler:
session:didReceiveMessageData:
session:didReceiveMessageData:replyHandler:
session:didReceiveApplicationContext:
session:didFinishUserInfoTransfer:error:
session:didReceiveUserInfo:
session:didFinishFileTransfer:error:
session:didReceiveFile:
appendItem:
openSystemURL:
applicationDidFinishLaunching
applicationDidBecomeActive
applicationWillResignActive
handleActionWithIdentifier:forRemoteNotification:
handleActionWithIdentifier:forLocalNotification:
handleActionWithIdentifier:forRemoteNotification:withResponseInfo:
handleActionWithIdentifier:forLocalNotification:withResponseInfo:
handleUserActivity:
didReceiveRemoteNotification:
didReceiveLocalNotification:
setTitle:
setAttributedTitle:
setBackgroundColor:
setBackgroundImage:
setBackgroundImageData:
setBackgroundImageNamed:
setEnabled:
awakeWithContext:
willActivate
didDeactivate
didAppear WK_AVAILABLE_WATCHOS_ONLY(2.0)
willDisappear WK_AVAILABLE_WATCHOS_ONLY(2.0)
pickerDidFocus:
pickerDidResignFocus:
pickerDidSettle:
table:didSelectRowAtIndex:
pushControllerWithName:context:
popController
popToRootController
becomeCurrentPage
presentControllerWithName:context:
presentControllerWithNames:contexts:
dismissController
presentTextInputControllerWithSuggestions:allowedInputMode:completion:
presentTextInputControllerWithSuggestionsForLanguage:allowedInputMode:completion:
dismissTextInputController
presentMediaPlayerControllerWithURL:options:completion:
dismissMediaPlayerController WK_AVAILABLE_WATCHOS_ONLY(2.0)
presentAudioRecorderControllerWithOutputURL:preset:options:completion:
dismissAudioRecorderController WK_AVAILABLE_WATCHOS_ONLY(2.0)
contextForSegueWithIdentifier:
contextsForSegueWithIdentifier:
contextForSegueWithIdentifier:inTable:rowIndex:
contextsForSegueWithIdentifier:inTable:rowIndex:
animateWithDuration:animations:
presentAlertControllerWithTitle:message:preferredStyle:actions:
presentAddPassesControllerWithPasses:completion:
dismissAddPassesController WK_AVAILABLE_WATCHOS_ONLY(2.0)
addMenuItemWithImage:title:
addMenuItemWithImageNamed:title:action:
addMenuItemWithItemIcon:title:action:
clearAllMenuItems
updateUserActivity:userInfo:webpageURL:
invalidateUserActivity
beginGlanceUpdates WK_AVAILABLE_WATCHOS_ONLY(2.0)
endGlanceUpdates WK_AVAILABLE_WATCHOS_ONLY(2.0)
didReceiveRemoteNotification:withCompletion:
didReceiveLocalNotification:withCompletion:
setTextColor:
setTimeZone:
setCalendar:
addCachedImage:name:
addCachedImageWithData:name:
removeCachedImageWithName:
removeAllCachedImages WK_AVAILABLE_IOS_ONLY(8.2)
playHaptic:
setCornerRadius:
setContentInset:
startAnimatingWithImagesInRange:duration:repeatCount:
setImageData:
setImageNamed:
setTintColor:
setText:
setAttributedText:
setVisibleMapRect:
setRegion:
addAnnotation:withImage:centerOffset:
addAnnotation:withImageNamed:centerOffset:
addAnnotation:withPinColor:
removeAllAnnotations
setMovieURL:
setVideoGravity:
setLoops:
setPosterImage:
setHidden:
setAlpha:
setSemanticContentAttribute:
setHorizontalAlignment:
setVerticalAlignment:
setWidth:
setHeight:
setRelativeWidth:withAdjustment:
setRelativeHeight:withAdjustment:
sizeToFitWidth WK_AVAILABLE_WATCHOS_ONLY(2.0)
sizeToFitHeight WK_AVAILABLE_WATCHOS_ONLY(2.0)
setAccessibilityIdentifier:
setAccessibilityLabel:
setAccessibilityHint:
setAccessibilityValue:
setIsAccessibilityElement:
setAccessibilityTraits:
setAccessibilityImageRegions:
focus
resignFocus
setSelectedItemIndex:
setItems:
setCoordinatedAnimations:
setColor:
setValue:
setNumberOfSteps:
setOn:
setRowTypes:
setNumberOfRows:withRowType:
rowControllerAtIndex:
insertRowsAtIndexes:withRowType:
removeRowsAtIndexes:
scrollToRowAtIndex:
setDate:
itemAtIndex:
webView:decidePolicyForNavigationAction:decisionHandler:
webView:decidePolicyForNavigationResponse:decisionHandler:
webView:didStartProvisionalNavigation:
webView:didReceiveServerRedirectForProvisionalNavigation:
webView:didFailProvisionalNavigation:withError:
webView:didCommitNavigation:
webView:didFinishNavigation:
webView:didFailNavigation:withError:
webView:didReceiveAuthenticationChallenge:completionHandler:
webViewWebContentProcessDidTerminate:
userContentController:didReceiveScriptMessage:
webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:
webViewDidClose:
webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:
webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:
webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:
addUserScript:
removeAllUserScripts
addScriptMessageHandler:name:
removeScriptMessageHandlerForName:
initWithSource:injectionTime:forMainFrameOnly:
fetchDataRecordsOfTypes:completionHandler:
removeDataOfTypes:forDataRecords:completionHandler:
removeDataOfTypes:modifiedSince:completionHandler:
initWithFrame:configuration:
loadFileURL:allowingReadAccessToURL:
loadData:MIMEType:characterEncodingName:baseURL:
goToBackForwardListItem:
reloadFromOrigin
evaluateJavaScript:completionHandler:
setMagnification:centeredAtPoint:
goBack:
goForward:
reload:
reloadFromOrigin:
stopLoading:
